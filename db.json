{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","path":"js/copy-codeblock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","path":"lib/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","path":"lib/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","path":"lib/fancybox/fancybox.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","path":"lib/mdui_043tiny/mdui.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","path":"lib/mdui_043tiny/mdui.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","path":"lib/fancybox/fancybox.umd.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/icon.jpg","path":"icon.jpg","modified":0,"renderable":0},{"_id":"source/illust_90420476_20210711_221548.png","path":"illust_90420476_20210711_221548.png","modified":0,"renderable":0},{"_id":"source/illust_94065114_20221225_232036.jpg","path":"illust_94065114_20221225_232036.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"469db3c87d835cd47f4aaff80c3cc577d8e6360e","modified":1691040098087},{"_id":"source/custom.css","hash":"acf467c9d851602d9c232314981a12ef467987b1","modified":1691040098087},{"_id":"source/archive.md","hash":"7a47b9b66e1400a499184bf80336508d46d2dac7","modified":1691040098087},{"_id":"source/py.md","hash":"6628a957592754e789736b648f1786991e194534","modified":1692439436665},{"_id":"source/_posts/8.1~8.7周报.md","hash":"d0b12b538eaece1ed9d2a40fd560b09b5450a039","modified":1692438299860},{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1691040098087},{"_id":"source/_posts/markdown语法.md","hash":"a878ed1ae9849ab49ea8293b8fdfaf25dafffbfe","modified":1691396311993},{"_id":"source/about/me.md","hash":"97de55d3c06057acf6d1573f062e8705b4ced458","modified":1691040098087},{"_id":"source/_posts/8.1~8.7周报/QQ图片20230802173453-16910415827143.png","hash":"30a6b5b508cd8e0880ff400be809e4225c4d6329","modified":1691041582717},{"_id":"node_modules/hexo-theme-nexmoe/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/README.md","hash":"bc78d5911da21732ec731212580cf12fd348f246","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/_config.yml","hash":"7d580602ce3cff4ebe0d4c9bb37ab34e68d6947a","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/crowdin.yml","hash":"2ad0f2dcd2b396f1169caee9e5e2aead81bda79b","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/index.js","hash":"f3d92ae5f32a9aee66f8b24083a2004d69a2b761","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/move_config.js","hash":"79f2fd683645d3cc68dd84d2a5a5636bea47a4f7","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/package.json","hash":"ff7441150123cb68ff378e7897fea9c1b45d8bc0","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/languages/default.yml","hash":"6b144fc5d123b2a7009f8994d079dc45df633107","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/en.yml","hash":"314f4ffdb237612980e14e964db0b5c720f2dc00","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/.github/release-drafter.yml","hash":"dd3b5e93c47c7da24f667ae9affc39b5f9318fc5","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/it.yml","hash":"7638f8d5c0056d5193945164ff31918dea42c681","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/ja.yml","hash":"ff41a855af829cf7a8af4c34d5818435fa11140f","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-HK.yml","hash":"5cbcfabcae88d58302bf8f0a1a9fa8e9eefde56b","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-CN.yml","hash":"7fc634168c705ae5d806433b280f2feff657d78b","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh-TW.yml","hash":"ad005493a2ab10a96376ada036f484aac10e0c9e","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/languages/zh.yml","hash":"f8348834e4e0609b753bdf75216abbfa2db29361","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/layout/archives.ejs","hash":"9027f1e8d5efaf289a6b4e119a145173d0cd912c","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/index.ejs","hash":"d4df47d4fd6dd1ae2c4b85c5bb33b76b9a3c294a","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/index.js","hash":"cc0d9081ff5405d9d469c443c2ce385bb7169862","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/_config.yml","hash":"8f508665b4512954103e04e1e86f9ebfe30e7748","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"feb8a8754a6bd76bb4c612436b79a44f18bb2ec5","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/layout/post.ejs","hash":"ffbcb632414a6d09ecf9bb99ac76c4e7065ebd2d","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/bug_report_en.md","hash":"8d52806087943924734c51e51d11ccbdc0617046","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_en.md","hash":"1de5315f528b54fd1be9f1c42bd14d9eee078dc6","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"0b267713fc9f986ef35b56ca3dfc55b2224395fd","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/layout/py.ejs","hash":"c664e20467c66ae744f4ec62b862afe9d7c3db9f","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/release-drafter.yml","hash":"264240842f4cc944636b31f326bbcd8e7d8f0d64","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/.github/workflows/npm-publish.yml","hash":"d7535b512fb77548bf95c10d0a728d8112075c68","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_index/list.ejs","hash":"46085a341d54a07efba3f76ac697710544b588c7","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/head.ejs","hash":"24aa4becf0ba15c2d0dbed9a44de01c3d95152a1","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/layout.ejs","hash":"663c78e211be8b543b7698de712021f7f32aec84","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/paginator.ejs","hash":"4f4addec9993ba1dee104df98013f636a16e9cb4","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/searchbox.ejs","hash":"e03fec2c56b284f3cbfaaba6dda2354ccf5cc4a1","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/archive.ejs","hash":"b14dd3de1469f36d5ca131412380a4c151d29935","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/category.ejs","hash":"a46946f96a512c6e035491b767b1a60828ce85b8","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/hitokoto.ejs","hash":"6b556dcaaa507a3548992755831fe1ad5ee99134","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/link.ejs","hash":"34dbdd31d5477928061e6f35cd5ca5679672bb50","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/recent_posts.ejs","hash":"ac93edcc618dcdad716e2549636e9834da2092d7","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/search.ejs","hash":"792d8196536d3ffd34734aaa9f9b8145ce17ce89","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tag.ejs","hash":"a14146c6177cc083f994c714ab414bb201ef1f07","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/tagcloud.ejs","hash":"2f580aec6fb680fb84e8c1604ddd11e222cb4742","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/css_auto_version.js","hash":"63c90dac6ad0a102ef302bf9fd9e030d521a8232","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/js_auto_version.js","hash":"98cf6f7edcca3d54ede63556751b1e4f896c7016","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/helper/image_filter.js","hash":"2ac7cb4937e7d5c425ccd5bc91d5068da787a52f","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/gallery.js","hash":"9bc38cea8684bfcf1293cc8f949a6e0407c0ced9","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/scripts/tag/links.js","hash":"ca6e804065fe1440dea4711f8b65e790f9c86de4","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_widget/social.ejs","hash":"d3925796a296b0ff41189ce505ebc290ba6986cf","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/style.styl","hash":"4a30eeea438ae2f7e1fe3bccc98364d1508e7b19","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/source/js/app.js","hash":"0e32a395d6461e7243fe40174ee31b1f0a0e47d9","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/js/search.js","hash":"718593d468a4c3607dd30878e7fb6ab4b20e62f4","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/js/copy-codeblock.js","hash":"c5b3348adb7c29d3600b00b611c53f7d0dc42dd7","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/copyright.ejs","hash":"f4dc4f5d09511f1ae775cb818d7fe3a9bff68912","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/meta.ejs","hash":"9472684dc6ae3bebf745882d25bb812c6030b8cf","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/tag.ejs","hash":"7a5f803b5fcdcc79fbe890c49b0e5d558f1aed5c","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_partial/_post/word-count.ejs","hash":"dfbf95e78cf2abf56e9626abef3a06c63cbbb94a","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/single/content.ejs","hash":"142dc0e2d63d26c5d2cb5be2b8960cfd3b321083","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/layout/_layout/single/header.ejs","hash":"7671279153d8baa3d26561578553a4606ba83973","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/archives.styl","hash":"d53095ea16062d224f455a47e965ba3da4965b2c","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/article.styl","hash":"b97b40f3944a27b6e96c975a292824642fab7096","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/copy-codeblock.styl","hash":"83372948cb098a8ad1da8bde17963701b8e39409","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/py.styl","hash":"786cb173dbbd5fc3d446efb76836f251a7a7acd3","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_partial/searchbox.styl","hash":"022582a49e5f16fea1f2f7e2b66b3e373cbee1e3","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/css/_widget/hitokoto.styl","hash":"77dd73e562e8282e70f8340815c95d76234105c4","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/demo_index.html","hash":"df3f126af2695d3dd839edcfda49b951b02f701e","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.eot","hash":"1d1851c2197382a9b7cd3b3fcdef79a61ad331f6","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.js","hash":"bac40fc7b766297cbf645849e583e8cd6496b2d2","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.json","hash":"79e09161126917b9729bb7e5fa04a5c9c634e666","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.svg","hash":"c6d700d47886901027f92836a9e3b807876733b3","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff","hash":"e292802913e6c248a17797dc24ecfc0a3473c3cf","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.css","hash":"01952f8f10c716cbb463b589a345e46f1b8cc101","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.ttf","hash":"b0f4b5501cbcaeaf15dc608359574a29bc4c4265","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/iconfont/iconfont.woff2","hash":"9209e4f7e45d37e58356e5ede7ea9d6d9e922d77","modified":1690362824000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.css","hash":"cbce0cfc36f47e30e9c9824875f0b854a05f1916","modified":1690362820000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/fancybox/fancybox.umd.js","hash":"16dcba1f11b46fdb7d4fd86003fd8095ecd2166d","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.js","hash":"280c0e0a4cab30f1ce0b8cad899d6e5cd2c1fd06","modified":1690362822000},{"_id":"node_modules/hexo-theme-nexmoe/source/lib/mdui_043tiny/mdui.css","hash":"b79ef94d2b11f8ce05ba048f5d74a3bd09f12e4d","modified":1690362820000},{"_id":"source/icon.jpg","hash":"af22d5501dd86958ba152a982fbca808df7c2767","modified":1691040098090},{"_id":"source/_posts/8.8~8.15笔记.md","hash":"ee7cf5fa25661b7bfe991eaa073e37afcd17e7a5","modified":1692438304908},{"_id":"source/_posts/8.1~8.7周报/image-20230805155452616.png","hash":"14daf8bb29d2af23a75b6184e177ea190fc94022","modified":1691222092636},{"_id":"source/_posts/8.1~8.7周报/image-20230805154931621.png","hash":"7b153bcc9417d921003b51ea574b505eb630e5bb","modified":1691221771647},{"_id":"source/_posts/8.1~8.7周报/image-20230805170423462.png","hash":"ae18cbf5df62329f84229d5c5606cf3e57389f40","modified":1691226263475},{"_id":"source/_posts/8.1~8.7周报/image-20230805172114403.png","hash":"3fe87fcfb95e43cd111c247d222fc5a8524f991f","modified":1691227274421},{"_id":"source/_posts/8.8~8.15笔记/image-20230815170254386.png","hash":"7b767656b4db83c749c3d3cccde884a7723d9da5","modified":1692090174391},{"_id":"source/_posts/8.1~8.7周报/image-20230805171655526.png","hash":"9254b08cc6fb77ee4a11eeea750517091fa9d9bc","modified":1691227015540},{"_id":"source/_posts/8.1~8.7周报/image-20230805165608821.png","hash":"f495f1c8fa4e49ec62b3e8ca07f3521c1e543bc2","modified":1691225768831},{"_id":"source/illust_94065114_20221225_232036.jpg","hash":"c4a150033938cf5577f592bbc4019c666a012bf2","modified":1692092049355},{"_id":"source/_posts/8.8~8.15笔记/image-20230812202043325.png","hash":"8b6802f7804c03ffc7f009f734886315f525f35b","modified":1691842843362},{"_id":"source/illust_90420476_20210711_221548.png","hash":"e3e9ca78cb7720ad43091bddde2e1e03ad8f6d31","modified":1692092049040},{"_id":"source/_posts/8.1~8.7周报/image-20230805172454571.png","hash":"4b2e2d3b3d7959f90230264f3fe28df29dd332b3","modified":1691227494599}],"Category":[],"Data":[],"Page":[{"title":"归档","layout":"archives","_content":"","source":"archive.md","raw":"---\ntitle: 归档\nlayout: archives\n---","date":"2023-08-03T05:21:38.087Z","updated":"2023-08-03T05:21:38.087Z","path":"archive.html","comments":1,"_id":"clkuqjq1t0000zgv58zkgd5fw","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":".nexmoe-post-cover {\n    box-shadow: 0 0 10px rgba(0,0,0,1);\n}","source":"custom.css","raw":".nexmoe-post-cover {\n    box-shadow: 0 0 10px rgba(0,0,0,1);\n}","date":"2023-08-03T05:21:38.087Z","updated":"2023-08-03T05:21:38.087Z","path":"custom.css","layout":"false","title":"","comments":1,"_id":"clkuqjq1v0001zgv50u51e7cr","content":".nexmoe-post-cover {\n    box-shadow: 0 0 10px rgba(0,0,0,1);\n}","site":{"data":{}},"excerpt":"","more":".nexmoe-post-cover {\n    box-shadow: 0 0 10px rgba(0,0,0,1);\n}"},{"title":"朋友","layout":"py","_content":"{% links shuffle %}\n[\n {\n  \"title\": \"折影轻梦\",\n  \"link\": \"https://nexmoe.com\",\n  \"img\": \"https://www.gravatar.com/avatar/c7fd185f8c967dec20c29c75a40b9e09\",\n  \"des\": \"为热爱战斗着，努力学着变得勇敢\"\n }\n]\n{% endlinks %}\n\n","source":"py.md","raw":"---\ntitle: 朋友\nlayout: py\npermalink: py.html\n---\n{% links shuffle %}\n[\n {\n  \"title\": \"折影轻梦\",\n  \"link\": \"https://nexmoe.com\",\n  \"img\": \"https://www.gravatar.com/avatar/c7fd185f8c967dec20c29c75a40b9e09\",\n  \"des\": \"为热爱战斗着，努力学着变得勇敢\"\n }\n]\n{% endlinks %}\n\n","date":"2023-08-19T10:03:56.665Z","updated":"2023-08-19T10:03:56.665Z","path":"py.html","_id":"clkuqjq1v0002zgv5hftgae3p","comments":1,"content":"<div class=\"nexmoe-py\"><ul>\n\t\t\t\t<li mdui-tooltip=\"{content: '为热爱战斗着，努力学着变得勇敢'}\">\n\t\t\t\t\t<a target=\"_blank\" href=\"https://nexmoe.com\" title=\"折影轻梦\">\n\t\t\t\t\t\t<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"https://www.gravatar.com/avatar/c7fd185f8c967dec20c29c75a40b9e09\" alt=\"折影轻梦\" data-caption=\"折影轻梦\" loading=\"lazy\">\n\t\t\t\t\t</a>\n\t\t\t\t</li></ul></div>\n\n","site":{"data":{}},"excerpt":"","more":"<div class=\"nexmoe-py\"><ul>\n\t\t\t\t<li mdui-tooltip=\"{content: '为热爱战斗着，努力学着变得勇敢'}\">\n\t\t\t\t\t<a target=\"_blank\" href=\"https://nexmoe.com\" title=\"折影轻梦\">\n\t\t\t\t\t\t<img src=\"https://www.gravatar.com/avatar/c7fd185f8c967dec20c29c75a40b9e09\" alt=\"折影轻梦\">\n\t\t\t\t\t</a>\n\t\t\t\t</li></ul></div>\n\n"},{"title":"About me","date":"2023-07-28T09:41:54.000Z","_content":"","source":"about/me.md","raw":"---\ntitle: About me\ndate: 2023-07-28 17:41:54\n---\n","updated":"2023-08-03T05:21:38.087Z","path":"about/me.html","comments":1,"layout":"page","_id":"clkuqjq1y0004zgv541372nsn","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"8.1~8.7笔记","date":"2023-08-07T11:15:00.000Z","cover":"/illust_90420476_20210711_221548.png","_content":"# 8.1~8.7笔记\n\n--------\n\n## 8.1\n\n晚上8点开始听网络安全专业启蒙沙龙，其中提到了pwn，re，misc（安全杂项），洛谷等专业名词，了解网安专业方向的多样性，在未来的学习中我们要选定一个方向去钻研。之后由毕业学长为我们介绍网安的未来就业前景和现状，最后总结结束了沙龙。\n\n-------\n\n## 8.2\n\n今天讲的是C语言基础，学习了一下四点内容：\n\n**1.c语言概述**\n\n- 介绍了什么是C语言\n\n- 为什么要学习C语言\n\n**2.第一个c语言程序**\n\n第一个C语言程序便是最经典的“Hello World!”\n\n```c\n#include <studio.h>//导包\nint main()//主函数\n{\n    printf(\"Hello World!\\n\");//输出\n    return 0;//程序正常退出\n}\n```\n\n<!--一定要注意程序格式不然在开学后用的pta程序会跑不起来-->\n\n>“ ”里面的内容叫做字符串，printf会把\"\"中的内容原封不动地输出\n>>\\n表示需要在输出的结果后面换行\n>>> %d说明后面有一个**整数**要输出在这个位置上\n\n```c\nprintf(\"13+14=%d\\n\",13+14);\n```\n那么此时就会输出13+14=27\n<!--注意中文的分号；和英文的;的区别-->\n\n**3.变量**\n\n- 变量：变量是一个保存数据的地方\n\n变量定义的一般形式就是：**<类型名称><变量名称>;**\n\n```c\nint a;\nint a,b;//在同一行中可以定义多个变量\n```\n\nC语言关键字不可以做标识符（变量的名字）如：**int,break,case**\n\n- 赋值和初始化\n\n```c\nint price = 0//此时的赋值叫做初始化\n```\n\n这里的“=”是一个赋值运算符，**表示将“=“右边的值赋给左边**\n\na=b和b=a在程序设计中与数学中不一样，在程序设计中相当于两个意思\n\na=b相当于叫计算机把b的值给a，反之亦然\n\n例如：\n\n```c\n#include <stdio.h> \nint main()\n{\n    int a=4;\n    int b=2;\n    a=b;\n    printf(\"a=%d\\n\",a);\n    return 0;\n}\n```\n\n此时程序运行便会输出a=2\n\n**4.浮点数**\n\n- 浮点数：带有小数点的数\n\n10是整数(int)，而10.0是浮点数\n\nC语言中采用float和double关键字来定位浮点数\n\nfloat：单精度浮点数(可以表示6到7位有效数字)\n\ndouble：双精度浮点数(可有表示15到16位有效数字)\n\n```c\nfloat a;\nscanf(\"%f\",&a);\nprintf(\"%f\",&a);\n\ndouble b:\nscanf(\"%lf\",&b);\nprinf(\"%f\",b);\n```\n\n当浮点数和整数放在一起运算时，C会将整数转换成浮点数，然后进行浮点数运算\n\n- 表达式\n\n运算符:是指进行运算的动作，比如加法运算符\"+\",减法运算符\"-\"\n\n算子：是指参与运算的之，这个值可能是常数，也可能是变量，还可能是一个方法的返回值\n\n比如：a=b+6;\n\n那么其中运算符有\"=\"、\"+\"，算子有”a“、”b“、”6“\n\n<img src=\"8.1~8.7周报/image-20230805172114403.png\" alt=\"image-20230805172114403\" style=\"zoom: 67%;\" />\n\n遵循先乘除后加减的运算规则（取余也算除法运算）可以通过括号改变运算顺序\n\n--------\n\n## 8.3\n\n<img src=\"8.1~8.7周报/image-20230805172454571.png\" alt=\"image-20230805172454571\" style=\"zoom:67%;\" />\n\n克隆仓库：git clone git地址\n初始化仓库：git init \n添加文件到暂存区：git add -A \n把暂存区的文件提交到仓库：git commit -m\n查看提交的历史记录：git log --stat\n工作区回滚：git checkout filename\n撤销最后一次提交：git reset HEAD^1\n以当前分支为基础新建分支：git checkout -b branchname\n列举所有的分支：git branch \n单纯地切换到某个分支：git checkout branchname \n删掉特定的分支：git branch -D branchname \n合并分支：git merge branchname \n放弃合并：git merge --abort \n添加远程仓库：git remote add origin\n本地仓库改名：git branch -M main\n上传代码：git push -u origin main\n推送当前分支最新的提交到远程：git push\n拉取远程分支最新的提交到本地：git pull\n\n以上是git相关代码，也可以在`vscode`下载`GitLens`扩展插件来进行图形化操作，省去次次打代码 ~~复制代码~~ 的麻烦。\n\n学习了git相关的工作原理和如何在vscode中使用git来进行上传本地内容到github上建立的远程仓库中。但学习的仍然浅显，还需在多次实践和复习巩固中，了解掌握git的使用。\n\n假如我要更新个人博客的话，由于github在国内链接不稳定，通过vscode的powershell终端不一定能成功将本地库成功上传更新，所以我可以通过梯子来帮助，在梯子中打开cmd终端，先直接输入`<目标硬盘>:`进入到目标硬盘后，再输入`cd\\<目标硬盘>\\<目标文件夹>`打开我的blog文件夹，此时输入以下三条指令：\n\n```\ngit add .                      添加所有修改的文件\ngit commit -m '文字内容'         更新日志（文字内容可替换）\ngit push                       （推送更新）\n```\n\n就能实现将本地文件夹中的内容上传到远程仓库，更新自己的博客了。\n\n\n--------\n\n## 8.4\n\n今天讲的是C语言分支，主要有以下两点内容：\n\n**1.条件判断**\n\nif(条件成立){...}如果条件成立，执行大括号里的内容，反之不执行，会跳过大括号里的内容。\n\n<img src=\"8.1~8.7周报/image-20230805155452616.png\" alt=\"`image-20230805155452616`\" style=\"zoom:50%;\" />\n\n- 关系运算的结果：当两个值的关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0\n\n```c\nprintf`(“%d\\n”,5==3);\nprintf(“%d\\n”,5>3);\nprintf(“%d\\n”,5<=3);\n```\n\n- 优先级：所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高\n\n`7>=3+4` 优先级高于`int r = a>0;`\n\n`==`和`！=`的优先级比其他的低，而连续的关系运算是从左到右进行的\n\n`5>3==6>4`  `6>5>4` `a==b==6` `a==b>0`\n\n- 注释：插入在程序代码中，用来向读者提高解释信息。它们对程序没有任何影响，但是往往使得程序更容易被人类读者理解。\n\n注释分为：`//`和`/**/`\n\n`//`是单行注释，`/**/`是多行注释，以`/*`开始,以`*/`结束\n\n**如果**\n\n如果条件不满足，做另一件事\n\nelse=否则的话\n\n```c\nif(条件){\n    ...\n}else{\n    ...\n}\n```\n\nif语句\n\n一个基本的if语句由一个关键字开头，跟在括号里的一个表示条件的逻辑表达式，然后是一对大括号”{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而执行下面的其他语句。\n\n```c\nf(total>amount)  total=total+amount+10;\n```\n\nif语句这一行结束的时候并没有表示语句结束的“；”，而在后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的“；”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。\n\nPS：以下是某学长给予的宝贵知识，此处整合到周报中用来一并记忆学习\n\n## if-else\n\n```c\nif(条件) {\n    执行语句\n} else {\n    执行语句\n}\n```\n\n`else` 是可有可无的\n\n当 `if` 条件满足时会执行 `if` 里面的语句，否则\n\n- 如果有 `else` 则执行 `else`\n\n  - 如果 `else` 后有 `if` ，将会再次判断是否符合，否则执行 `else`\n\n    ```c\n    int a = 10;\n    if(a>100) {\n        printf(\"a大于100\");\n        xxxxxx;\n    }else if(a>10) {\n        printf(\"a大于10且小于等于100\");\n    }else if(a>5) {\n        printf(\"a大于5且a小于等于10\");\n    }else{\n        printf(\"a小于等于5\");\n    }\n    ```\n\n    区别：\n\n    ```c\n    int a = 20;\n    if(a>100) {\n        printf(\"a大于100\");\n    }//else{}\n    if(a>10) {\n        printf(\"a大于10且小于等于100\");\n    }//else{}\n    if(a>5) {\n        printf(\"a大于5且a小于等于10\");\n    }else{\n        printf(\"a小于等于5\");\n    }\n    ```\n\n- 如果没有 `else` 将不会执行\n\nif简写\n\n```c\nif(a>10) printf(\"a大于10\");\nelse {printf(\"a小于等于10\");xxxxxx;}\n```\n\nif 嵌套\n\n```c\nif(a) {\n    if(b) {\n        xxx\n    }else{\n        xxxx\n    }\n}else{\n    xxxxx\n}\n```\n\n**2.循环**\n\nwhile(条件){...}从语法角度看循环和if类似，区别在于if指只会执行一次，while会执行多次。\n\n<img src=\"8.1~8.7周报/image-20230805165608821.png\" alt=\"image-20230805165608821\" style=\"zoom:80%;\" />\n\n- **while循环**\n\n如果我们把while翻译作“当”，那么一个while循环的意思是：当条件满足时，不断地重复循环体内的语句。循环之前需要判断是否符合条件才能进入循环，所以有可能循环一次也没执行。条件成立是循环继续的基础。\n\n验证：测试程序常使用边界数据，如有效范围两端的数据，特殊的倍数等，在代码执行前一般都需要模拟一下。\n\n- **do-while循环**\n\n在进入循环体的时候不做检查，而是在执行完一轮循环体的代码后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。\n\n```c\ndo\n{\t<循环体语句>\n}while(<循环条件>);\n\n```\n\n<img src=\"8.1~8.7周报/image-20230805170423462.png\" alt=\"image-20230805170423462\" style=\"zoom:67%;\" />\n\ndo-while循环和while循环很像，区别在循环体执行结束的时候才来判断条件。也就是说，无论如何，`循环都会执行至少一边遍`，然后再来判断条件。与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。\n\n- **for循环**\n\n```c\nfor(初始条件；循环继续条件；循环每一轮要做的事情）{\n\n......\n}\n```\n\nfor循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步骤进行调整，比如加1或者减1。例如：\n\n```c\n#include <stdio.h> \nint main()\n{\n\tfor(int i=0;i<5;i=i+1){\n    printf(\"%d\",i);\n}\n\treturn 0;\n}\n```\n\n这个代码会不断执行循环，直到i=5时，程序会停止循环，结果输出为01234\n\nfor=对于\n\nfor(count=10;count>0;count--)就读成：”对于一开始的count=10,当count>0时，重复做循环体，每一轮循环在做完循环体语句后，使得count--。“\n\n<!--Tips：做求和的程序时，记录结果的变量应该初始化为0，而做求和积的变量时，记录结果的变量应该初始化为1-->\n\n- **循环次数**\n\nfor(i=0;i<n;i++)则循环的次数是n，而循环结束以后，i的值是n.循环的控制变量i，是选择从0开始还是从1开始，是判断i<n还是判断i<=n；对循环的次数，循环结束后变量的值有影响。\n\n<img src=\"8.1~8.7周报/image-20230805171655526.png\" alt=\"image-20230805171655526\" style=\"zoom: 67%;\" />\n\n如果有固定次数，用for如果必须执行一次，用do-while其他情况用while\n\n-----\n\n## 8.5\n\n今天事情比较多，没学习新的东西，只回顾了几遍笔记。在晚上读了读《提问的智慧》，受益匪浅。\n\n[提问的智慧]: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-z\n\n--------\n\n## 8.6\n\n今天讲的是C语言的进一步判断和循环,主要学习的是以下两点：\n\n**1.级联和嵌套的判断**\n\n- **级联**\n\n类似于分段函数\nif\nelse if\nelse\n不用再进else里的大括号\n单一出口原则程序里操作不要多次输出\n\n- **嵌套**\n\n如果if条件满足或不满足时，又进一个if 这就是if的嵌套语句。\n缩进不能影响else的匹配。在没有大括号时，else跟最近的if匹配。在if或else后始终用{}。\n\n此处内容与8.4中if-else的内容相近，就不再详细记录了。\n\n**2.多支分路**\n\n- **switch-case**\n\n```c\nswitch(控制表达式）{\u000bcase 常量：\n语句\n......\ncase 常量：\n语句\n......\ndefault:\n语句\n......\n}\n```\n\n控制表达式只能是整数型的结果常量可以是常数，也可以是常数计算的表达式。\n\n不会像级联一样 从头判断，控制表达式只能是整数型（int）结果\n如果没有break 会顺序执行下面的case case只是跳转，我们可以利用这个特性来进行不同需求的程序设计。\n\n-----\n\n## 8.7\n\n今天打算在完成C语言作业之余，多去了解些C语言相关知识，继续阅读《提问的智慧》，争取在今后的学习中，能够更好的提出有意义 的提问，得到学长们的有效解答。QWQ\n\n以上就是这七天中学习的东西。\n","source":"_posts/8.1~8.7周报.md","raw":"---\ntitle: 8.1~8.7笔记\ndate: 2023-08-07 19:15:00\ncover: /illust_90420476_20210711_221548.png\ntags: 笔记\n---\n# 8.1~8.7笔记\n\n--------\n\n## 8.1\n\n晚上8点开始听网络安全专业启蒙沙龙，其中提到了pwn，re，misc（安全杂项），洛谷等专业名词，了解网安专业方向的多样性，在未来的学习中我们要选定一个方向去钻研。之后由毕业学长为我们介绍网安的未来就业前景和现状，最后总结结束了沙龙。\n\n-------\n\n## 8.2\n\n今天讲的是C语言基础，学习了一下四点内容：\n\n**1.c语言概述**\n\n- 介绍了什么是C语言\n\n- 为什么要学习C语言\n\n**2.第一个c语言程序**\n\n第一个C语言程序便是最经典的“Hello World!”\n\n```c\n#include <studio.h>//导包\nint main()//主函数\n{\n    printf(\"Hello World!\\n\");//输出\n    return 0;//程序正常退出\n}\n```\n\n<!--一定要注意程序格式不然在开学后用的pta程序会跑不起来-->\n\n>“ ”里面的内容叫做字符串，printf会把\"\"中的内容原封不动地输出\n>>\\n表示需要在输出的结果后面换行\n>>> %d说明后面有一个**整数**要输出在这个位置上\n\n```c\nprintf(\"13+14=%d\\n\",13+14);\n```\n那么此时就会输出13+14=27\n<!--注意中文的分号；和英文的;的区别-->\n\n**3.变量**\n\n- 变量：变量是一个保存数据的地方\n\n变量定义的一般形式就是：**<类型名称><变量名称>;**\n\n```c\nint a;\nint a,b;//在同一行中可以定义多个变量\n```\n\nC语言关键字不可以做标识符（变量的名字）如：**int,break,case**\n\n- 赋值和初始化\n\n```c\nint price = 0//此时的赋值叫做初始化\n```\n\n这里的“=”是一个赋值运算符，**表示将“=“右边的值赋给左边**\n\na=b和b=a在程序设计中与数学中不一样，在程序设计中相当于两个意思\n\na=b相当于叫计算机把b的值给a，反之亦然\n\n例如：\n\n```c\n#include <stdio.h> \nint main()\n{\n    int a=4;\n    int b=2;\n    a=b;\n    printf(\"a=%d\\n\",a);\n    return 0;\n}\n```\n\n此时程序运行便会输出a=2\n\n**4.浮点数**\n\n- 浮点数：带有小数点的数\n\n10是整数(int)，而10.0是浮点数\n\nC语言中采用float和double关键字来定位浮点数\n\nfloat：单精度浮点数(可以表示6到7位有效数字)\n\ndouble：双精度浮点数(可有表示15到16位有效数字)\n\n```c\nfloat a;\nscanf(\"%f\",&a);\nprintf(\"%f\",&a);\n\ndouble b:\nscanf(\"%lf\",&b);\nprinf(\"%f\",b);\n```\n\n当浮点数和整数放在一起运算时，C会将整数转换成浮点数，然后进行浮点数运算\n\n- 表达式\n\n运算符:是指进行运算的动作，比如加法运算符\"+\",减法运算符\"-\"\n\n算子：是指参与运算的之，这个值可能是常数，也可能是变量，还可能是一个方法的返回值\n\n比如：a=b+6;\n\n那么其中运算符有\"=\"、\"+\"，算子有”a“、”b“、”6“\n\n<img src=\"8.1~8.7周报/image-20230805172114403.png\" alt=\"image-20230805172114403\" style=\"zoom: 67%;\" />\n\n遵循先乘除后加减的运算规则（取余也算除法运算）可以通过括号改变运算顺序\n\n--------\n\n## 8.3\n\n<img src=\"8.1~8.7周报/image-20230805172454571.png\" alt=\"image-20230805172454571\" style=\"zoom:67%;\" />\n\n克隆仓库：git clone git地址\n初始化仓库：git init \n添加文件到暂存区：git add -A \n把暂存区的文件提交到仓库：git commit -m\n查看提交的历史记录：git log --stat\n工作区回滚：git checkout filename\n撤销最后一次提交：git reset HEAD^1\n以当前分支为基础新建分支：git checkout -b branchname\n列举所有的分支：git branch \n单纯地切换到某个分支：git checkout branchname \n删掉特定的分支：git branch -D branchname \n合并分支：git merge branchname \n放弃合并：git merge --abort \n添加远程仓库：git remote add origin\n本地仓库改名：git branch -M main\n上传代码：git push -u origin main\n推送当前分支最新的提交到远程：git push\n拉取远程分支最新的提交到本地：git pull\n\n以上是git相关代码，也可以在`vscode`下载`GitLens`扩展插件来进行图形化操作，省去次次打代码 ~~复制代码~~ 的麻烦。\n\n学习了git相关的工作原理和如何在vscode中使用git来进行上传本地内容到github上建立的远程仓库中。但学习的仍然浅显，还需在多次实践和复习巩固中，了解掌握git的使用。\n\n假如我要更新个人博客的话，由于github在国内链接不稳定，通过vscode的powershell终端不一定能成功将本地库成功上传更新，所以我可以通过梯子来帮助，在梯子中打开cmd终端，先直接输入`<目标硬盘>:`进入到目标硬盘后，再输入`cd\\<目标硬盘>\\<目标文件夹>`打开我的blog文件夹，此时输入以下三条指令：\n\n```\ngit add .                      添加所有修改的文件\ngit commit -m '文字内容'         更新日志（文字内容可替换）\ngit push                       （推送更新）\n```\n\n就能实现将本地文件夹中的内容上传到远程仓库，更新自己的博客了。\n\n\n--------\n\n## 8.4\n\n今天讲的是C语言分支，主要有以下两点内容：\n\n**1.条件判断**\n\nif(条件成立){...}如果条件成立，执行大括号里的内容，反之不执行，会跳过大括号里的内容。\n\n<img src=\"8.1~8.7周报/image-20230805155452616.png\" alt=\"`image-20230805155452616`\" style=\"zoom:50%;\" />\n\n- 关系运算的结果：当两个值的关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0\n\n```c\nprintf`(“%d\\n”,5==3);\nprintf(“%d\\n”,5>3);\nprintf(“%d\\n”,5<=3);\n```\n\n- 优先级：所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高\n\n`7>=3+4` 优先级高于`int r = a>0;`\n\n`==`和`！=`的优先级比其他的低，而连续的关系运算是从左到右进行的\n\n`5>3==6>4`  `6>5>4` `a==b==6` `a==b>0`\n\n- 注释：插入在程序代码中，用来向读者提高解释信息。它们对程序没有任何影响，但是往往使得程序更容易被人类读者理解。\n\n注释分为：`//`和`/**/`\n\n`//`是单行注释，`/**/`是多行注释，以`/*`开始,以`*/`结束\n\n**如果**\n\n如果条件不满足，做另一件事\n\nelse=否则的话\n\n```c\nif(条件){\n    ...\n}else{\n    ...\n}\n```\n\nif语句\n\n一个基本的if语句由一个关键字开头，跟在括号里的一个表示条件的逻辑表达式，然后是一对大括号”{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而执行下面的其他语句。\n\n```c\nf(total>amount)  total=total+amount+10;\n```\n\nif语句这一行结束的时候并没有表示语句结束的“；”，而在后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的“；”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。\n\nPS：以下是某学长给予的宝贵知识，此处整合到周报中用来一并记忆学习\n\n## if-else\n\n```c\nif(条件) {\n    执行语句\n} else {\n    执行语句\n}\n```\n\n`else` 是可有可无的\n\n当 `if` 条件满足时会执行 `if` 里面的语句，否则\n\n- 如果有 `else` 则执行 `else`\n\n  - 如果 `else` 后有 `if` ，将会再次判断是否符合，否则执行 `else`\n\n    ```c\n    int a = 10;\n    if(a>100) {\n        printf(\"a大于100\");\n        xxxxxx;\n    }else if(a>10) {\n        printf(\"a大于10且小于等于100\");\n    }else if(a>5) {\n        printf(\"a大于5且a小于等于10\");\n    }else{\n        printf(\"a小于等于5\");\n    }\n    ```\n\n    区别：\n\n    ```c\n    int a = 20;\n    if(a>100) {\n        printf(\"a大于100\");\n    }//else{}\n    if(a>10) {\n        printf(\"a大于10且小于等于100\");\n    }//else{}\n    if(a>5) {\n        printf(\"a大于5且a小于等于10\");\n    }else{\n        printf(\"a小于等于5\");\n    }\n    ```\n\n- 如果没有 `else` 将不会执行\n\nif简写\n\n```c\nif(a>10) printf(\"a大于10\");\nelse {printf(\"a小于等于10\");xxxxxx;}\n```\n\nif 嵌套\n\n```c\nif(a) {\n    if(b) {\n        xxx\n    }else{\n        xxxx\n    }\n}else{\n    xxxxx\n}\n```\n\n**2.循环**\n\nwhile(条件){...}从语法角度看循环和if类似，区别在于if指只会执行一次，while会执行多次。\n\n<img src=\"8.1~8.7周报/image-20230805165608821.png\" alt=\"image-20230805165608821\" style=\"zoom:80%;\" />\n\n- **while循环**\n\n如果我们把while翻译作“当”，那么一个while循环的意思是：当条件满足时，不断地重复循环体内的语句。循环之前需要判断是否符合条件才能进入循环，所以有可能循环一次也没执行。条件成立是循环继续的基础。\n\n验证：测试程序常使用边界数据，如有效范围两端的数据，特殊的倍数等，在代码执行前一般都需要模拟一下。\n\n- **do-while循环**\n\n在进入循环体的时候不做检查，而是在执行完一轮循环体的代码后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。\n\n```c\ndo\n{\t<循环体语句>\n}while(<循环条件>);\n\n```\n\n<img src=\"8.1~8.7周报/image-20230805170423462.png\" alt=\"image-20230805170423462\" style=\"zoom:67%;\" />\n\ndo-while循环和while循环很像，区别在循环体执行结束的时候才来判断条件。也就是说，无论如何，`循环都会执行至少一边遍`，然后再来判断条件。与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。\n\n- **for循环**\n\n```c\nfor(初始条件；循环继续条件；循环每一轮要做的事情）{\n\n......\n}\n```\n\nfor循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步骤进行调整，比如加1或者减1。例如：\n\n```c\n#include <stdio.h> \nint main()\n{\n\tfor(int i=0;i<5;i=i+1){\n    printf(\"%d\",i);\n}\n\treturn 0;\n}\n```\n\n这个代码会不断执行循环，直到i=5时，程序会停止循环，结果输出为01234\n\nfor=对于\n\nfor(count=10;count>0;count--)就读成：”对于一开始的count=10,当count>0时，重复做循环体，每一轮循环在做完循环体语句后，使得count--。“\n\n<!--Tips：做求和的程序时，记录结果的变量应该初始化为0，而做求和积的变量时，记录结果的变量应该初始化为1-->\n\n- **循环次数**\n\nfor(i=0;i<n;i++)则循环的次数是n，而循环结束以后，i的值是n.循环的控制变量i，是选择从0开始还是从1开始，是判断i<n还是判断i<=n；对循环的次数，循环结束后变量的值有影响。\n\n<img src=\"8.1~8.7周报/image-20230805171655526.png\" alt=\"image-20230805171655526\" style=\"zoom: 67%;\" />\n\n如果有固定次数，用for如果必须执行一次，用do-while其他情况用while\n\n-----\n\n## 8.5\n\n今天事情比较多，没学习新的东西，只回顾了几遍笔记。在晚上读了读《提问的智慧》，受益匪浅。\n\n[提问的智慧]: https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-z\n\n--------\n\n## 8.6\n\n今天讲的是C语言的进一步判断和循环,主要学习的是以下两点：\n\n**1.级联和嵌套的判断**\n\n- **级联**\n\n类似于分段函数\nif\nelse if\nelse\n不用再进else里的大括号\n单一出口原则程序里操作不要多次输出\n\n- **嵌套**\n\n如果if条件满足或不满足时，又进一个if 这就是if的嵌套语句。\n缩进不能影响else的匹配。在没有大括号时，else跟最近的if匹配。在if或else后始终用{}。\n\n此处内容与8.4中if-else的内容相近，就不再详细记录了。\n\n**2.多支分路**\n\n- **switch-case**\n\n```c\nswitch(控制表达式）{\u000bcase 常量：\n语句\n......\ncase 常量：\n语句\n......\ndefault:\n语句\n......\n}\n```\n\n控制表达式只能是整数型的结果常量可以是常数，也可以是常数计算的表达式。\n\n不会像级联一样 从头判断，控制表达式只能是整数型（int）结果\n如果没有break 会顺序执行下面的case case只是跳转，我们可以利用这个特性来进行不同需求的程序设计。\n\n-----\n\n## 8.7\n\n今天打算在完成C语言作业之余，多去了解些C语言相关知识，继续阅读《提问的智慧》，争取在今后的学习中，能够更好的提出有意义 的提问，得到学长们的有效解答。QWQ\n\n以上就是这七天中学习的东西。\n","slug":"8.1~8.7周报","published":1,"updated":"2023-08-19T09:44:59.860Z","_id":"clkuqjq1w0003zgv5anun4kvf","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"8-1-8-7笔记\"><a href=\"#8-1-8-7笔记\" class=\"headerlink\" title=\"8.1~8.7笔记\"></a>8.1~8.7笔记</h1><hr>\n<h2 id=\"8-1\"><a href=\"#8-1\" class=\"headerlink\" title=\"8.1\"></a>8.1</h2><p>晚上8点开始听网络安全专业启蒙沙龙，其中提到了pwn，re，misc（安全杂项），洛谷等专业名词，了解网安专业方向的多样性，在未来的学习中我们要选定一个方向去钻研。之后由毕业学长为我们介绍网安的未来就业前景和现状，最后总结结束了沙龙。</p>\n<hr>\n<h2 id=\"8-2\"><a href=\"#8-2\" class=\"headerlink\" title=\"8.2\"></a>8.2</h2><p>今天讲的是C语言基础，学习了一下四点内容：</p>\n<p><strong>1.c语言概述</strong></p>\n<ul>\n<li><p>介绍了什么是C语言</p>\n</li>\n<li><p>为什么要学习C语言</p>\n</li>\n</ul>\n<p><strong>2.第一个c语言程序</strong></p>\n<p>第一个C语言程序便是最经典的“Hello World!”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;studio.h&gt;</span><span class=\"comment\">//导包</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span><span class=\"comment\">//主函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World!\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//程序正常退出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!--一定要注意程序格式不然在开学后用的pta程序会跑不起来-->\n\n<blockquote>\n<p>“ ”里面的内容叫做字符串，printf会把””中的内容原封不动地输出</p>\n<blockquote>\n<p>\\n表示需要在输出的结果后面换行</p>\n<blockquote>\n<p>%d说明后面有一个<strong>整数</strong>要输出在这个位置上</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;13+14=%d\\n&quot;</span>,<span class=\"number\">13</span>+<span class=\"number\">14</span>);</span><br></pre></td></tr></table></figure>\n<p>那么此时就会输出13+14&#x3D;27</p>\n<!--注意中文的分号；和英文的;的区别-->\n\n<p><strong>3.变量</strong></p>\n<ul>\n<li>变量：变量是一个保存数据的地方</li>\n</ul>\n<p>变量定义的一般形式就是：**&lt;类型名称&gt;&lt;变量名称&gt;;**</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b;<span class=\"comment\">//在同一行中可以定义多个变量</span></span><br></pre></td></tr></table></figure>\n\n<p>C语言关键字不可以做标识符（变量的名字）如：<strong>int,break,case</strong></p>\n<ul>\n<li>赋值和初始化</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> price = <span class=\"number\">0</span><span class=\"comment\">//此时的赋值叫做初始化</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的“&#x3D;”是一个赋值运算符，<strong>表示将“&#x3D;“右边的值赋给左边</strong></p>\n<p>a&#x3D;b和b&#x3D;a在程序设计中与数学中不一样，在程序设计中相当于两个意思</p>\n<p>a&#x3D;b相当于叫计算机把b的值给a，反之亦然</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\">    a=b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d\\n&quot;</span>,a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时程序运行便会输出a&#x3D;2</p>\n<p><strong>4.浮点数</strong></p>\n<ul>\n<li>浮点数：带有小数点的数</li>\n</ul>\n<p>10是整数(int)，而10.0是浮点数</p>\n<p>C语言中采用float和double关键字来定位浮点数</p>\n<p>float：单精度浮点数(可以表示6到7位有效数字)</p>\n<p>double：双精度浮点数(可有表示15到16位有效数字)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;a);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> b:</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>,&amp;b);</span><br><span class=\"line\">prinf(<span class=\"string\">&quot;%f&quot;</span>,b);</span><br></pre></td></tr></table></figure>\n\n<p>当浮点数和整数放在一起运算时，C会将整数转换成浮点数，然后进行浮点数运算</p>\n<ul>\n<li>表达式</li>\n</ul>\n<p>运算符:是指进行运算的动作，比如加法运算符”+”,减法运算符”-“</p>\n<p>算子：是指参与运算的之，这个值可能是常数，也可能是变量，还可能是一个方法的返回值</p>\n<p>比如：a&#x3D;b+6;</p>\n<p>那么其中运算符有”&#x3D;”、”+”，算子有”a“、”b“、”6“</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805172114403.png\" alt=\"image-20230805172114403\" data-caption=\"image-20230805172114403\" loading=\"lazy\">\n\n<p>遵循先乘除后加减的运算规则（取余也算除法运算）可以通过括号改变运算顺序</p>\n<hr>\n<h2 id=\"8-3\"><a href=\"#8-3\" class=\"headerlink\" title=\"8.3\"></a>8.3</h2><img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805172454571.png\" alt=\"image-20230805172454571\" data-caption=\"image-20230805172454571\" loading=\"lazy\">\n\n<p>克隆仓库：git clone git地址<br>初始化仓库：git init<br>添加文件到暂存区：git add -A<br>把暂存区的文件提交到仓库：git commit -m<br>查看提交的历史记录：git log –stat<br>工作区回滚：git checkout filename<br>撤销最后一次提交：git reset HEAD^1<br>以当前分支为基础新建分支：git checkout -b branchname<br>列举所有的分支：git branch<br>单纯地切换到某个分支：git checkout branchname<br>删掉特定的分支：git branch -D branchname<br>合并分支：git merge branchname<br>放弃合并：git merge –abort<br>添加远程仓库：git remote add origin<br>本地仓库改名：git branch -M main<br>上传代码：git push -u origin main<br>推送当前分支最新的提交到远程：git push<br>拉取远程分支最新的提交到本地：git pull</p>\n<p>以上是git相关代码，也可以在<code>vscode</code>下载<code>GitLens</code>扩展插件来进行图形化操作，省去次次打代码 <del>复制代码</del> 的麻烦。</p>\n<p>学习了git相关的工作原理和如何在vscode中使用git来进行上传本地内容到github上建立的远程仓库中。但学习的仍然浅显，还需在多次实践和复习巩固中，了解掌握git的使用。</p>\n<p>假如我要更新个人博客的话，由于github在国内链接不稳定，通过vscode的powershell终端不一定能成功将本地库成功上传更新，所以我可以通过梯子来帮助，在梯子中打开cmd终端，先直接输入<code>&lt;目标硬盘&gt;:</code>进入到目标硬盘后，再输入<code>cd\\&lt;目标硬盘&gt;\\&lt;目标文件夹&gt;</code>打开我的blog文件夹，此时输入以下三条指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                      添加所有修改的文件</span><br><span class=\"line\">git commit -m &#x27;文字内容&#x27;         更新日志（文字内容可替换）</span><br><span class=\"line\">git push                       （推送更新）</span><br></pre></td></tr></table></figure>\n\n<p>就能实现将本地文件夹中的内容上传到远程仓库，更新自己的博客了。</p>\n<hr>\n<h2 id=\"8-4\"><a href=\"#8-4\" class=\"headerlink\" title=\"8.4\"></a>8.4</h2><p>今天讲的是C语言分支，主要有以下两点内容：</p>\n<p><strong>1.条件判断</strong></p>\n<p>if(条件成立){…}如果条件成立，执行大括号里的内容，反之不执行，会跳过大括号里的内容。</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805155452616.png\" alt=\"`image-20230805155452616`\" data-caption=\"`image-20230805155452616`\" loading=\"lazy\">\n\n<ul>\n<li>关系运算的结果：当两个值的关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>`(“%d\\n”,<span class=\"number\">5</span>==<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(“%d\\n”,<span class=\"number\">5</span>&gt;<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(“%d\\n”,<span class=\"number\">5</span>&lt;=<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优先级：所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高</li>\n</ul>\n<p><code>7&gt;=3+4</code> 优先级高于<code>int r = a&gt;0;</code></p>\n<p><code>==</code>和<code>！=</code>的优先级比其他的低，而连续的关系运算是从左到右进行的</p>\n<p><code>5&gt;3==6&gt;4</code>  <code>6&gt;5&gt;4</code> <code>a==b==6</code> <code>a==b&gt;0</code></p>\n<ul>\n<li>注释：插入在程序代码中，用来向读者提高解释信息。它们对程序没有任何影响，但是往往使得程序更容易被人类读者理解。</li>\n</ul>\n<p>注释分为：<code>//</code>和<code>/**/</code></p>\n<p><code>//</code>是单行注释，<code>/**/</code>是多行注释，以<code>/*</code>开始,以<code>*/</code>结束</p>\n<p><strong>如果</strong></p>\n<p>如果条件不满足，做另一件事</p>\n<p>else&#x3D;否则的话</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>if语句</p>\n<p>一个基本的if语句由一个关键字开头，跟在括号里的一个表示条件的逻辑表达式，然后是一对大括号”{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而执行下面的其他语句。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(total&gt;amount)  total=total+amount+<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>if语句这一行结束的时候并没有表示语句结束的“；”，而在后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的“；”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。</p>\n<p>PS：以下是某学长给予的宝贵知识，此处整合到周报中用来一并记忆学习</p>\n<h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a>if-else</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件) &#123;</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>else</code> 是可有可无的</p>\n<p>当 <code>if</code> 条件满足时会执行 <code>if</code> 里面的语句，否则</p>\n<ul>\n<li><p>如果有 <code>else</code> 则执行 <code>else</code></p>\n<ul>\n<li><p>如果 <code>else</code> 后有 <code>if</code> ，将会再次判断是否符合，否则执行 <code>else</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于100&quot;</span>);</span><br><span class=\"line\">    xxxxxx;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10且小于等于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于5且a小于等于10&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于5&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>区别：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//else&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10且小于等于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//else&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于5且a小于等于10&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于5&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>如果没有 <code>else</code> 将不会执行</p>\n</li>\n</ul>\n<p>if简写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于10&quot;</span>);xxxxxx;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>if 嵌套</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b) &#123;</span><br><span class=\"line\">        xxx</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xxxx</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    xxxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.循环</strong></p>\n<p>while(条件){…}从语法角度看循环和if类似，区别在于if指只会执行一次，while会执行多次。</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805165608821.png\" alt=\"image-20230805165608821\" data-caption=\"image-20230805165608821\" loading=\"lazy\">\n\n<ul>\n<li><strong>while循环</strong></li>\n</ul>\n<p>如果我们把while翻译作“当”，那么一个while循环的意思是：当条件满足时，不断地重复循环体内的语句。循环之前需要判断是否符合条件才能进入循环，所以有可能循环一次也没执行。条件成立是循环继续的基础。</p>\n<p>验证：测试程序常使用边界数据，如有效范围两端的数据，特殊的倍数等，在代码执行前一般都需要模拟一下。</p>\n<ul>\n<li><strong>do-while循环</strong></li>\n</ul>\n<p>在进入循环体的时候不做检查，而是在执行完一轮循环体的代码后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;\t&lt;循环体语句&gt;</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(&lt;循环条件&gt;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805170423462.png\" alt=\"image-20230805170423462\" data-caption=\"image-20230805170423462\" loading=\"lazy\">\n\n<p>do-while循环和while循环很像，区别在循环体执行结束的时候才来判断条件。也就是说，无论如何，<code>循环都会执行至少一边遍</code>，然后再来判断条件。与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。</p>\n<ul>\n<li><strong>for循环</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始条件；循环继续条件；循环每一轮要做的事情）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步骤进行调整，比如加1或者减1。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i=i+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个代码会不断执行循环，直到i&#x3D;5时，程序会停止循环，结果输出为01234</p>\n<p>for&#x3D;对于</p>\n<p>for(count&#x3D;10;count&gt;0;count–)就读成：”对于一开始的count&#x3D;10,当count&gt;0时，重复做循环体，每一轮循环在做完循环体语句后，使得count–。“</p>\n<!--Tips：做求和的程序时，记录结果的变量应该初始化为0，而做求和积的变量时，记录结果的变量应该初始化为1-->\n\n<ul>\n<li><strong>循环次数</strong></li>\n</ul>\n<p>for(i&#x3D;0;i&lt;n;i++)则循环的次数是n，而循环结束以后，i的值是n.循环的控制变量i，是选择从0开始还是从1开始，是判断i&lt;n还是判断i&lt;&#x3D;n；对循环的次数，循环结束后变量的值有影响。</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805171655526.png\" alt=\"image-20230805171655526\" data-caption=\"image-20230805171655526\" loading=\"lazy\">\n\n<p>如果有固定次数，用for如果必须执行一次，用do-while其他情况用while</p>\n<hr>\n<h2 id=\"8-5\"><a href=\"#8-5\" class=\"headerlink\" title=\"8.5\"></a>8.5</h2><p>今天事情比较多，没学习新的东西，只回顾了几遍笔记。在晚上读了读《提问的智慧》，受益匪浅。</p>\n<hr>\n<h2 id=\"8-6\"><a href=\"#8-6\" class=\"headerlink\" title=\"8.6\"></a>8.6</h2><p>今天讲的是C语言的进一步判断和循环,主要学习的是以下两点：</p>\n<p><strong>1.级联和嵌套的判断</strong></p>\n<ul>\n<li><strong>级联</strong></li>\n</ul>\n<p>类似于分段函数<br>if<br>else if<br>else<br>不用再进else里的大括号<br>单一出口原则程序里操作不要多次输出</p>\n<ul>\n<li><strong>嵌套</strong></li>\n</ul>\n<p>如果if条件满足或不满足时，又进一个if 这就是if的嵌套语句。<br>缩进不能影响else的匹配。在没有大括号时，else跟最近的if匹配。在if或else后始终用{}。</p>\n<p>此处内容与8.4中if-else的内容相近，就不再详细记录了。</p>\n<p><strong>2.多支分路</strong></p>\n<ul>\n<li><strong>switch-case</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(控制表达式）&#123;\u000b<span class=\"keyword\">case</span> 常量：</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">case</span> 常量：</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制表达式只能是整数型的结果常量可以是常数，也可以是常数计算的表达式。</p>\n<p>不会像级联一样 从头判断，控制表达式只能是整数型（int）结果<br>如果没有break 会顺序执行下面的case case只是跳转，我们可以利用这个特性来进行不同需求的程序设计。</p>\n<hr>\n<h2 id=\"8-7\"><a href=\"#8-7\" class=\"headerlink\" title=\"8.7\"></a>8.7</h2><p>今天打算在完成C语言作业之余，多去了解些C语言相关知识，继续阅读《提问的智慧》，争取在今后的学习中，能够更好的提出有意义 的提问，得到学长们的有效解答。QWQ</p>\n<p>以上就是这七天中学习的东西。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"8-1-8-7笔记\"><a href=\"#8-1-8-7笔记\" class=\"headerlink\" title=\"8.1~8.7笔记\"></a>8.1~8.7笔记</h1><hr>\n<h2 id=\"8-1\"><a href=\"#8-1\" class=\"headerlink\" title=\"8.1\"></a>8.1</h2><p>晚上8点开始听网络安全专业启蒙沙龙，其中提到了pwn，re，misc（安全杂项），洛谷等专业名词，了解网安专业方向的多样性，在未来的学习中我们要选定一个方向去钻研。之后由毕业学长为我们介绍网安的未来就业前景和现状，最后总结结束了沙龙。</p>\n<hr>\n<h2 id=\"8-2\"><a href=\"#8-2\" class=\"headerlink\" title=\"8.2\"></a>8.2</h2><p>今天讲的是C语言基础，学习了一下四点内容：</p>\n<p><strong>1.c语言概述</strong></p>\n<ul>\n<li><p>介绍了什么是C语言</p>\n</li>\n<li><p>为什么要学习C语言</p>\n</li>\n</ul>\n<p><strong>2.第一个c语言程序</strong></p>\n<p>第一个C语言程序便是最经典的“Hello World!”</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;studio.h&gt;</span><span class=\"comment\">//导包</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span><span class=\"comment\">//主函数</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello World!\\n&quot;</span>);<span class=\"comment\">//输出</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;<span class=\"comment\">//程序正常退出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<!--一定要注意程序格式不然在开学后用的pta程序会跑不起来-->\n\n<blockquote>\n<p>“ ”里面的内容叫做字符串，printf会把””中的内容原封不动地输出</p>\n<blockquote>\n<p>\\n表示需要在输出的结果后面换行</p>\n<blockquote>\n<p>%d说明后面有一个<strong>整数</strong>要输出在这个位置上</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;13+14=%d\\n&quot;</span>,<span class=\"number\">13</span>+<span class=\"number\">14</span>);</span><br></pre></td></tr></table></figure>\n<p>那么此时就会输出13+14&#x3D;27</p>\n<!--注意中文的分号；和英文的;的区别-->\n\n<p><strong>3.变量</strong></p>\n<ul>\n<li>变量：变量是一个保存数据的地方</li>\n</ul>\n<p>变量定义的一般形式就是：**&lt;类型名称&gt;&lt;变量名称&gt;;**</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b;<span class=\"comment\">//在同一行中可以定义多个变量</span></span><br></pre></td></tr></table></figure>\n\n<p>C语言关键字不可以做标识符（变量的名字）如：<strong>int,break,case</strong></p>\n<ul>\n<li>赋值和初始化</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> price = <span class=\"number\">0</span><span class=\"comment\">//此时的赋值叫做初始化</span></span><br></pre></td></tr></table></figure>\n\n<p>这里的“&#x3D;”是一个赋值运算符，<strong>表示将“&#x3D;“右边的值赋给左边</strong></p>\n<p>a&#x3D;b和b&#x3D;a在程序设计中与数学中不一样，在程序设计中相当于两个意思</p>\n<p>a&#x3D;b相当于叫计算机把b的值给a，反之亦然</p>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=<span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=<span class=\"number\">2</span>;</span><br><span class=\"line\">    a=b;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d\\n&quot;</span>,a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时程序运行便会输出a&#x3D;2</p>\n<p><strong>4.浮点数</strong></p>\n<ul>\n<li>浮点数：带有小数点的数</li>\n</ul>\n<p>10是整数(int)，而10.0是浮点数</p>\n<p>C语言中采用float和double关键字来定位浮点数</p>\n<p>float：单精度浮点数(可以表示6到7位有效数字)</p>\n<p>double：双精度浮点数(可有表示15到16位有效数字)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;a);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">double</span> b:</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>,&amp;b);</span><br><span class=\"line\">prinf(<span class=\"string\">&quot;%f&quot;</span>,b);</span><br></pre></td></tr></table></figure>\n\n<p>当浮点数和整数放在一起运算时，C会将整数转换成浮点数，然后进行浮点数运算</p>\n<ul>\n<li>表达式</li>\n</ul>\n<p>运算符:是指进行运算的动作，比如加法运算符”+”,减法运算符”-“</p>\n<p>算子：是指参与运算的之，这个值可能是常数，也可能是变量，还可能是一个方法的返回值</p>\n<p>比如：a&#x3D;b+6;</p>\n<p>那么其中运算符有”&#x3D;”、”+”，算子有”a“、”b“、”6“</p>\n<img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805172114403.png\" alt=\"image-20230805172114403\" style=\"zoom: 67%;\">\n\n<p>遵循先乘除后加减的运算规则（取余也算除法运算）可以通过括号改变运算顺序</p>\n<hr>\n<h2 id=\"8-3\"><a href=\"#8-3\" class=\"headerlink\" title=\"8.3\"></a>8.3</h2><img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805172454571.png\" alt=\"image-20230805172454571\" style=\"zoom:67%;\">\n\n<p>克隆仓库：git clone git地址<br>初始化仓库：git init<br>添加文件到暂存区：git add -A<br>把暂存区的文件提交到仓库：git commit -m<br>查看提交的历史记录：git log –stat<br>工作区回滚：git checkout filename<br>撤销最后一次提交：git reset HEAD^1<br>以当前分支为基础新建分支：git checkout -b branchname<br>列举所有的分支：git branch<br>单纯地切换到某个分支：git checkout branchname<br>删掉特定的分支：git branch -D branchname<br>合并分支：git merge branchname<br>放弃合并：git merge –abort<br>添加远程仓库：git remote add origin<br>本地仓库改名：git branch -M main<br>上传代码：git push -u origin main<br>推送当前分支最新的提交到远程：git push<br>拉取远程分支最新的提交到本地：git pull</p>\n<p>以上是git相关代码，也可以在<code>vscode</code>下载<code>GitLens</code>扩展插件来进行图形化操作，省去次次打代码 <del>复制代码</del> 的麻烦。</p>\n<p>学习了git相关的工作原理和如何在vscode中使用git来进行上传本地内容到github上建立的远程仓库中。但学习的仍然浅显，还需在多次实践和复习巩固中，了解掌握git的使用。</p>\n<p>假如我要更新个人博客的话，由于github在国内链接不稳定，通过vscode的powershell终端不一定能成功将本地库成功上传更新，所以我可以通过梯子来帮助，在梯子中打开cmd终端，先直接输入<code>&lt;目标硬盘&gt;:</code>进入到目标硬盘后，再输入<code>cd\\&lt;目标硬盘&gt;\\&lt;目标文件夹&gt;</code>打开我的blog文件夹，此时输入以下三条指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .                      添加所有修改的文件</span><br><span class=\"line\">git commit -m &#x27;文字内容&#x27;         更新日志（文字内容可替换）</span><br><span class=\"line\">git push                       （推送更新）</span><br></pre></td></tr></table></figure>\n\n<p>就能实现将本地文件夹中的内容上传到远程仓库，更新自己的博客了。</p>\n<hr>\n<h2 id=\"8-4\"><a href=\"#8-4\" class=\"headerlink\" title=\"8.4\"></a>8.4</h2><p>今天讲的是C语言分支，主要有以下两点内容：</p>\n<p><strong>1.条件判断</strong></p>\n<p>if(条件成立){…}如果条件成立，执行大括号里的内容，反之不执行，会跳过大括号里的内容。</p>\n<img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805155452616.png\" alt=\"`image-20230805155452616`\" style=\"zoom:50%;\">\n\n<ul>\n<li>关系运算的结果：当两个值的关系符合关系运算符的预期时，关系运算的结果为整数1，否则为整数0</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>`(“%d\\n”,<span class=\"number\">5</span>==<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(“%d\\n”,<span class=\"number\">5</span>&gt;<span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(“%d\\n”,<span class=\"number\">5</span>&lt;=<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>优先级：所有的关系运算符的优先级比算术运算的低，但是比赋值运算的高</li>\n</ul>\n<p><code>7&gt;=3+4</code> 优先级高于<code>int r = a&gt;0;</code></p>\n<p><code>==</code>和<code>！=</code>的优先级比其他的低，而连续的关系运算是从左到右进行的</p>\n<p><code>5&gt;3==6&gt;4</code>  <code>6&gt;5&gt;4</code> <code>a==b==6</code> <code>a==b&gt;0</code></p>\n<ul>\n<li>注释：插入在程序代码中，用来向读者提高解释信息。它们对程序没有任何影响，但是往往使得程序更容易被人类读者理解。</li>\n</ul>\n<p>注释分为：<code>//</code>和<code>/**/</code></p>\n<p><code>//</code>是单行注释，<code>/**/</code>是多行注释，以<code>/*</code>开始,以<code>*/</code>结束</p>\n<p><strong>如果</strong></p>\n<p>如果条件不满足，做另一件事</p>\n<p>else&#x3D;否则的话</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>if语句</p>\n<p>一个基本的if语句由一个关键字开头，跟在括号里的一个表示条件的逻辑表达式，然后是一对大括号”{}”之间的若干条语句。如果表示条件的逻辑表达式的结果不是零，那么就执行后面跟着的这对大括号中的语句，否则就跳过这些语句不执行，而执行下面的其他语句。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(total&gt;amount)  total=total+amount+<span class=\"number\">10</span>;</span><br></pre></td></tr></table></figure>\n\n<p>if语句这一行结束的时候并没有表示语句结束的“；”，而在后面的赋值语句写在if的下一行，并且缩进了，在这一行结束的时候有一个表示语句结束的“；”。这表明这条赋值语句是if语句的一部分，if语句拥有和控制这条赋值语句，决定它是否要被执行。</p>\n<p>PS：以下是某学长给予的宝贵知识，此处整合到周报中用来一并记忆学习</p>\n<h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if-else\"></a>if-else</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件) &#123;</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    执行语句</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>else</code> 是可有可无的</p>\n<p>当 <code>if</code> 条件满足时会执行 <code>if</code> 里面的语句，否则</p>\n<ul>\n<li><p>如果有 <code>else</code> 则执行 <code>else</code></p>\n<ul>\n<li><p>如果 <code>else</code> 后有 <code>if</code> ，将会再次判断是否符合，否则执行 <code>else</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于100&quot;</span>);</span><br><span class=\"line\">    xxxxxx;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10且小于等于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a&gt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于5且a小于等于10&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于5&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>区别：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//else&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10且小于等于100&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//else&#123;&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于5且a小于等于10&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于5&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>如果没有 <code>else</code> 将不会执行</p>\n</li>\n</ul>\n<p>if简写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a&gt;<span class=\"number\">10</span>) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a大于10&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a小于等于10&quot;</span>);xxxxxx;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>if 嵌套</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(a) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b) &#123;</span><br><span class=\"line\">        xxx</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        xxxx</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    xxxxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2.循环</strong></p>\n<p>while(条件){…}从语法角度看循环和if类似，区别在于if指只会执行一次，while会执行多次。</p>\n<img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805165608821.png\" alt=\"image-20230805165608821\" style=\"zoom:80%;\">\n\n<ul>\n<li><strong>while循环</strong></li>\n</ul>\n<p>如果我们把while翻译作“当”，那么一个while循环的意思是：当条件满足时，不断地重复循环体内的语句。循环之前需要判断是否符合条件才能进入循环，所以有可能循环一次也没执行。条件成立是循环继续的基础。</p>\n<p>验证：测试程序常使用边界数据，如有效范围两端的数据，特殊的倍数等，在代码执行前一般都需要模拟一下。</p>\n<ul>\n<li><strong>do-while循环</strong></li>\n</ul>\n<p>在进入循环体的时候不做检查，而是在执行完一轮循环体的代码后，再来检查循环的条件是否满足，如果满足则继续下一轮循环，不满足则结束循环。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;\t&lt;循环体语句&gt;</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(&lt;循环条件&gt;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805170423462.png\" alt=\"image-20230805170423462\" style=\"zoom:67%;\">\n\n<p>do-while循环和while循环很像，区别在循环体执行结束的时候才来判断条件。也就是说，无论如何，<code>循环都会执行至少一边遍</code>，然后再来判断条件。与while循环相同的是，条件满足时执行循环，条件不满足时结束循环。</p>\n<ul>\n<li><strong>for循环</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始条件；循环继续条件；循环每一轮要做的事情）&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>for循环像一个计数循环：设定一个计数器，初始化它，然后在计数器到达某值之前，重复执行循环体，而每执行一轮循环，计数器值以一定步骤进行调整，比如加1或者减1。例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i=i+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个代码会不断执行循环，直到i&#x3D;5时，程序会停止循环，结果输出为01234</p>\n<p>for&#x3D;对于</p>\n<p>for(count&#x3D;10;count&gt;0;count–)就读成：”对于一开始的count&#x3D;10,当count&gt;0时，重复做循环体，每一轮循环在做完循环体语句后，使得count–。“</p>\n<!--Tips：做求和的程序时，记录结果的变量应该初始化为0，而做求和积的变量时，记录结果的变量应该初始化为1-->\n\n<ul>\n<li><strong>循环次数</strong></li>\n</ul>\n<p>for(i&#x3D;0;i&lt;n;i++)则循环的次数是n，而循环结束以后，i的值是n.循环的控制变量i，是选择从0开始还是从1开始，是判断i&lt;n还是判断i&lt;&#x3D;n；对循环的次数，循环结束后变量的值有影响。</p>\n<img src=\"/2023/08/07/8.1~8.7%E5%91%A8%E6%8A%A5/image-20230805171655526.png\" alt=\"image-20230805171655526\" style=\"zoom: 67%;\">\n\n<p>如果有固定次数，用for如果必须执行一次，用do-while其他情况用while</p>\n<hr>\n<h2 id=\"8-5\"><a href=\"#8-5\" class=\"headerlink\" title=\"8.5\"></a>8.5</h2><p>今天事情比较多，没学习新的东西，只回顾了几遍笔记。在晚上读了读《提问的智慧》，受益匪浅。</p>\n<hr>\n<h2 id=\"8-6\"><a href=\"#8-6\" class=\"headerlink\" title=\"8.6\"></a>8.6</h2><p>今天讲的是C语言的进一步判断和循环,主要学习的是以下两点：</p>\n<p><strong>1.级联和嵌套的判断</strong></p>\n<ul>\n<li><strong>级联</strong></li>\n</ul>\n<p>类似于分段函数<br>if<br>else if<br>else<br>不用再进else里的大括号<br>单一出口原则程序里操作不要多次输出</p>\n<ul>\n<li><strong>嵌套</strong></li>\n</ul>\n<p>如果if条件满足或不满足时，又进一个if 这就是if的嵌套语句。<br>缩进不能影响else的匹配。在没有大括号时，else跟最近的if匹配。在if或else后始终用{}。</p>\n<p>此处内容与8.4中if-else的内容相近，就不再详细记录了。</p>\n<p><strong>2.多支分路</strong></p>\n<ul>\n<li><strong>switch-case</strong></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(控制表达式）&#123;\u000b<span class=\"keyword\">case</span> 常量：</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">case</span> 常量：</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">语句</span><br><span class=\"line\">......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>控制表达式只能是整数型的结果常量可以是常数，也可以是常数计算的表达式。</p>\n<p>不会像级联一样 从头判断，控制表达式只能是整数型（int）结果<br>如果没有break 会顺序执行下面的case case只是跳转，我们可以利用这个特性来进行不同需求的程序设计。</p>\n<hr>\n<h2 id=\"8-7\"><a href=\"#8-7\" class=\"headerlink\" title=\"8.7\"></a>8.7</h2><p>今天打算在完成C语言作业之余，多去了解些C语言相关知识，继续阅读《提问的智慧》，争取在今后的学习中，能够更好的提出有意义 的提问，得到学长们的有效解答。QWQ</p>\n<p>以上就是这七天中学习的东西。</p>\n"},{"title":"markdown语法","date":"2023-07-28T14:29:00.000Z","_content":"(1)标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n==高亮==\n(2)字体\n**加粗**\n*倾斜*\n<下划线>\n~~删除线~~\n这是^上标^\n这是~下标~\n(3)列表\n①有序列表\n\n1. 窗竹影摇书案上\n2. 野泉声入砚池中\n3. 少年辛苦终身事\n4. 莫向光阴惰寸功\n\n②无序列表\n\n- 窗竹影摇书案上\n  - 野泉声入砚池中\n    - 少年辛苦终身事\n      - 莫向光阴惰寸功 \n\n (4)表格\n\n| MON  | TUE  | WED  | THU  | FRI  | SUN  |\n| :--- | ---- | :--- | ---- | ---- | ---- |\n|      |      |      |      |      |      |\n|      |      |      |      |      |      |\n\n(5)引用/链接\n> [Typora学习教程]: https://www.bilibili.com/video/BV1R4411575c/?spm_id_from=333.999.0.0&amp;vd_source=14aeb69c51d9ed19399930b46e98dc5d\n>\n>\n\n(6)分割线\n\n----------\n-------\n(7)代码\n\n生成并部署博客：`npm run deploy`\n\n上传源代码：``git add .``\n``git commit -m 'update'``\n``git push``\n\n以上就是今天学习到的东西~~","source":"_posts/markdown语法.md","raw":"---\ntitle: markdown语法\ndate: 2023-07-28 22:29:00\ntags: 笔记\n---\n(1)标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n==高亮==\n(2)字体\n**加粗**\n*倾斜*\n<下划线>\n~~删除线~~\n这是^上标^\n这是~下标~\n(3)列表\n①有序列表\n\n1. 窗竹影摇书案上\n2. 野泉声入砚池中\n3. 少年辛苦终身事\n4. 莫向光阴惰寸功\n\n②无序列表\n\n- 窗竹影摇书案上\n  - 野泉声入砚池中\n    - 少年辛苦终身事\n      - 莫向光阴惰寸功 \n\n (4)表格\n\n| MON  | TUE  | WED  | THU  | FRI  | SUN  |\n| :--- | ---- | :--- | ---- | ---- | ---- |\n|      |      |      |      |      |      |\n|      |      |      |      |      |      |\n\n(5)引用/链接\n> [Typora学习教程]: https://www.bilibili.com/video/BV1R4411575c/?spm_id_from=333.999.0.0&amp;vd_source=14aeb69c51d9ed19399930b46e98dc5d\n>\n>\n\n(6)分割线\n\n----------\n-------\n(7)代码\n\n生成并部署博客：`npm run deploy`\n\n上传源代码：``git add .``\n``git commit -m 'update'``\n``git push``\n\n以上就是今天学习到的东西~~","slug":"markdown语法","published":1,"updated":"2023-08-07T08:18:31.993Z","_id":"clkuqjq1z0006zgv50jj5931b","comments":1,"layout":"post","photos":[],"link":"","content":"<p>(1)标题</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;<br>(2)字体<br><strong>加粗</strong><br><em>倾斜</em><br>&lt;下划线&gt;<br><del>删除线</del><br>这是^上标^<br>这是<del>下标</del><br>(3)列表<br>①有序列表</p>\n<ol>\n<li>窗竹影摇书案上</li>\n<li>野泉声入砚池中</li>\n<li>少年辛苦终身事</li>\n<li>莫向光阴惰寸功</li>\n</ol>\n<p>②无序列表</p>\n<ul>\n<li>窗竹影摇书案上<ul>\n<li>野泉声入砚池中<ul>\n<li>少年辛苦终身事<ul>\n<li>莫向光阴惰寸功</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p> (4)表格</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">MON</th>\n<th>TUE</th>\n<th align=\"left\">WED</th>\n<th>THU</th>\n<th>FRI</th>\n<th>SUN</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>(5)引用&#x2F;链接</p>\n<blockquote>\n</blockquote>\n<p>(6)分割线</p>\n<hr>\n<hr>\n<p>(7)代码</p>\n<p>生成并部署博客：<code>npm run deploy</code></p>\n<p>上传源代码：<code>git add .</code><br><code>git commit -m &#39;update&#39;</code><br><code>git push</code></p>\n<p>以上就是今天学习到的东西~~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>(1)标题</p>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;<br>(2)字体<br><strong>加粗</strong><br><em>倾斜</em><br>&lt;下划线&gt;<br><del>删除线</del><br>这是^上标^<br>这是<del>下标</del><br>(3)列表<br>①有序列表</p>\n<ol>\n<li>窗竹影摇书案上</li>\n<li>野泉声入砚池中</li>\n<li>少年辛苦终身事</li>\n<li>莫向光阴惰寸功</li>\n</ol>\n<p>②无序列表</p>\n<ul>\n<li>窗竹影摇书案上<ul>\n<li>野泉声入砚池中<ul>\n<li>少年辛苦终身事<ul>\n<li>莫向光阴惰寸功</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p> (4)表格</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">MON</th>\n<th>TUE</th>\n<th align=\"left\">WED</th>\n<th>THU</th>\n<th>FRI</th>\n<th>SUN</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td></td>\n<td align=\"left\"></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>(5)引用&#x2F;链接</p>\n<blockquote>\n</blockquote>\n<p>(6)分割线</p>\n<hr>\n<hr>\n<p>(7)代码</p>\n<p>生成并部署博客：<code>npm run deploy</code></p>\n<p>上传源代码：<code>git add .</code><br><code>git commit -m &#39;update&#39;</code><br><code>git push</code></p>\n<p>以上就是今天学习到的东西~~</p>\n"},{"title":"8.8~8.15笔记","date":"2023-08-15T11:45:10.000Z","cover":"/illust_94065114_20221225_232036.jpg","_content":"# 8.8~8.15笔记\n\n### **1. 数据类型**\n\n- **字节**\n\n计算机专用的一种计量单位，一个字节代表了8个二进制位也就是256（0000 0000）2的8次方\n两个字节（BYTE）构成一个字（WORD），两个字（WORD）构成一个双字（DOUBLE WORD）\n\n双字可简写为DWORD，相当于四个字节\n\n> Q：为什么会有数据类型？\n>\n> A：在C语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量储存占用的空间，以及如何结束储存的位模式。\n\n#### C语言的数据类型共分为：\n\n1.基本类型：包括整形（int），浮点型（float），字符型（char），和双精度浮点型（double）\n\n2.枚举类型被用来定义在程序中只能赋予其一定的离散整数值的变量\n\n3.void类型：表示没有值的数据类型，通常用于函数返回值\n\n4.派生类型：包括数组类型，指针类型和结构体类型\n\n- **有符号和无符号关键字**\n\nSigned：类型默认位signed，也就是有符号数\n\nUnisigned：可以搭配基本类型进行定义，无符号数关键字\n\n有符号数和无符号数区分：\n\n有符号数就是负数，正数就是正数；无符号数负数也代表了一个正数\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a=3;\n    int b=-1;\n    printf(\" %d %u \",a,a);\n    printf(\" %d %u \",b,b);\n    //%u就是unsigned int的占位符\n    return 0;\n}\n```\n\n输出的结果却是` 3 3  -1 4294967295  ` 4294967295可以看作范围的终点，而范围又可以看作是一个圆圈，过了这个终点又会变为起点，所以4294967295+1输出是0，这就是数据的溢出。\n\n- **sizeof()操作符**：用来查看参数的大小，操作数可以是变量，也可以是数据类型\n\n1.用于数据类型\n\nsizeof使用形式：sizeof(type)\t数据类型必须用括号括住：sizeof(int)\n\n2.用于变量\n\nsizeof使用形式：sizeo(var_name)或sizeof\tvar_name\n\n变量名可以不用括号括住 如：sizeof(var_name), sizeof\tvar_name等都是正确形式\n\n注意：sizeof操作符不能用于函数类型，不完全类型或位字段。\n\nsizeof操作符的结果类型是**size_t**\n\n#### 基本类型\n\n字符型：关键字char类型，用于对小型整数或者字符变量进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度是-128~127，当是无符号数的时候数据宽度是0~256.char类型大小是1字节，占位符是%c。\n\n> 1字节==8比特(bit)==256\n\n计算机表示字符的方式：\n\nascall码：计算机方便对英文字符进行编码的操作码，一个ascall码有八位(1字节)\n\nunicode：计算机对各国字符统一进行的编码，一个unicode码有十六位(2字节)\n\n- 短整形：关键字short类型，用于对较小整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-32768~32767，当时无符号数的时候数据宽度是0~65535。short类型大小是2字节，占位符是%hd。\n\n- 整形：关键字int类型，用于对一般整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-2147483648~2147483647，当是无符号数的时候数据宽度是0~4294967296。int类型大小是4字节，占位符是%d。\n\n- 浮点形：关键字float类型，用于对浮点数进行定义，数据宽度是1.2E-38~3.4E+38。float类型大小是4字节，占位符是%f，精度范围是6位有效位。\n\n- 浮点形：关键字double类型，用于对浮点数进行定义，数据宽度是2.3E-308~3.4E+308。double类型大小是8字节，占位符是%f，精度范围是15位有效位。\n\n- void类型\n\nvoid，也就是无类型，\"无效的或完全空白的\"\n\n最熟悉的用途是：\n\n·虚函数返回类型\n\n·虚函数作为功能参数\n\n·空指针声明\n\n空指针(void*)：void指针可以指向任意类型的数据，就是说可以用任意类型的指针对void指针对void指针赋值\n\n当函数不需要返回值时，必须使用void限定，这就是我们所说的第一种情况。\n\n例如：void func(int a,char *b)。\n\n当函数不允许接受参数时，必须使用void限定，这就是我们所说的第二种情况。\n\n例如：int func(void)。\n\n<img src=\"8.8~8.15笔记/image-20230812202043325.png\" alt=\"image-20230812202043325\" style=\"zoom: 50%;\" />\n\n### 2.函数\n\n函数是一组一起执行一个任务的语句。每个C程序都至少有一个函数，即主函数main()，所有简单的\n\n程序都可以定义其他额外的函数。\n\n您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，花灯通常是根据每个函数执行一个特定的任务来进行的。\n\n函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。\n\n函数形式\n\nreturn_type function_name(parameter list)\n{\nbody of the function\n}\n\n在C语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：\n\n- 返回类型：一个函数可以i返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type是关键字void。\n- 函数名称：这是函数的实际名称。函数名和参数古列表一起构成了函数签名。\n- 参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数\n- 函数主体：函数主体包括一组定义函数执行任务的语句。\n\n函数例子\n\n```c\n#include <studio.h>\nint add(int a ,int b)/*左边代码add()表示一个加法的函数*/\n{\n    int c = a + b;/*这个函数在被调用时传递了两个参数，第一个是a,第二个是b*/\n    return c;\n}/*函数功能是借用函数里面定义的一个变量c来对a和b相加，再将这个变量c传递出去(return)*/\nint main()\n{\n    int a = 10;\n    int b = 5;\n    int c = add(a,b);\n    printf(\"%d\",c);\n}\n```\n\n我们可以通过将函数封装起来形成⼀个头文件，只需在使用时从头文件中调用函数，就可以使得main函数里面只需要⼀个函数便实现题目所需要的各种功能。\n\n### **3.数组**\n\n- 数组定义(array)\n\n数组是一个固定长度的储存相同数据类型的数据结构，数组中的元素被储存在一段连续的内存空间中。它是最简单的数据结构之一，大多数现代编程语言都内置数组支持。\n\n<img src=\"8.8~8.15笔记/image-20230815170254386.png\" alt=\"image-20230815170254386\" style=\"zoom: 50%;\" />\n\n数组特点\n\n1.数组必须有相应的数据类型，而且数组里面元素的类型必须和数组本身的类型相对应。\n\n2.数组元素的个数和数组本身的大小有关系。\n\n3.数组通过下标遍历（循环）、寻找元素\n\n4.数组可以被函数调用（数组本身是一个变量）\n\n- 数组应用\n\n数组可以把许多相同的元素整合到一起保存使用，比如对输入能够直接使用数组输入，而不必像之前一样将scanf放在for循环里面。\n\n- 字符数组（字符串）\n\n字符数组实际上是一系列字符的集合，也就是字符串(String)\n\n在C语言中，没有专门的字符串变量，没有string类型，通常就用一个字符数组来存放一个字符串。在C语言中，字符串总是以 `\\0`作为结尾，所以`\\0`也被称为字符串结束标志，或者字符串结束符由`\"\"`包围的字符串会自动在末尾添加`\\0`。\n\n例如：`\"abc\"`看起来只包含了3个字符，但C语言会在最后添加一个`\\0`，但我们感受不到。而由`''`赋值的字符串则不会在末尾自动加\\0，若要以`%s`输出，则会输出错误，应该在末尾手动添加`\"\\0\"`。\n\n- 多维数组\n\nC语言的多维数组就相当于是元素为数组的数组（套娃）\n\n数组例题：用数组逆序输出一组个数为0~10的数\n\n```c\n#include <stdio.h>\nint main()\n{\n\tint number=0;\n\tscanf_s(\"%d\",&number);\n\tint array[10];\n\tfor(int i=0;i<number;i++)\n\t{\n\t\tscanf_s(\"%d\",&array[i]);\n\t}\n\tfor(int i=0;i<number/2;i++)\n\t{\n\t\t int temp=array[i];\n\t\tarray[i]=array[number-i -1];\n\t\tarray[number-i -1]=temp;\n\t}\n\tfor(int i=0;i<number;i++)\n\t{\n\t\tprintf(\"%d \",array[i]);\n\t}\n}\n```\n\n\n\n","source":"_posts/8.8~8.15笔记.md","raw":"---\ntitle: 8.8~8.15笔记\ndate: 2023-08-15 19:45:10\ncover: /illust_94065114_20221225_232036.jpg\ntags: 笔记\n---\n# 8.8~8.15笔记\n\n### **1. 数据类型**\n\n- **字节**\n\n计算机专用的一种计量单位，一个字节代表了8个二进制位也就是256（0000 0000）2的8次方\n两个字节（BYTE）构成一个字（WORD），两个字（WORD）构成一个双字（DOUBLE WORD）\n\n双字可简写为DWORD，相当于四个字节\n\n> Q：为什么会有数据类型？\n>\n> A：在C语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量储存占用的空间，以及如何结束储存的位模式。\n\n#### C语言的数据类型共分为：\n\n1.基本类型：包括整形（int），浮点型（float），字符型（char），和双精度浮点型（double）\n\n2.枚举类型被用来定义在程序中只能赋予其一定的离散整数值的变量\n\n3.void类型：表示没有值的数据类型，通常用于函数返回值\n\n4.派生类型：包括数组类型，指针类型和结构体类型\n\n- **有符号和无符号关键字**\n\nSigned：类型默认位signed，也就是有符号数\n\nUnisigned：可以搭配基本类型进行定义，无符号数关键字\n\n有符号数和无符号数区分：\n\n有符号数就是负数，正数就是正数；无符号数负数也代表了一个正数\n\n```c\n#include <stdio.h>\nint main()\n{\n    int a=3;\n    int b=-1;\n    printf(\" %d %u \",a,a);\n    printf(\" %d %u \",b,b);\n    //%u就是unsigned int的占位符\n    return 0;\n}\n```\n\n输出的结果却是` 3 3  -1 4294967295  ` 4294967295可以看作范围的终点，而范围又可以看作是一个圆圈，过了这个终点又会变为起点，所以4294967295+1输出是0，这就是数据的溢出。\n\n- **sizeof()操作符**：用来查看参数的大小，操作数可以是变量，也可以是数据类型\n\n1.用于数据类型\n\nsizeof使用形式：sizeof(type)\t数据类型必须用括号括住：sizeof(int)\n\n2.用于变量\n\nsizeof使用形式：sizeo(var_name)或sizeof\tvar_name\n\n变量名可以不用括号括住 如：sizeof(var_name), sizeof\tvar_name等都是正确形式\n\n注意：sizeof操作符不能用于函数类型，不完全类型或位字段。\n\nsizeof操作符的结果类型是**size_t**\n\n#### 基本类型\n\n字符型：关键字char类型，用于对小型整数或者字符变量进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度是-128~127，当是无符号数的时候数据宽度是0~256.char类型大小是1字节，占位符是%c。\n\n> 1字节==8比特(bit)==256\n\n计算机表示字符的方式：\n\nascall码：计算机方便对英文字符进行编码的操作码，一个ascall码有八位(1字节)\n\nunicode：计算机对各国字符统一进行的编码，一个unicode码有十六位(2字节)\n\n- 短整形：关键字short类型，用于对较小整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-32768~32767，当时无符号数的时候数据宽度是0~65535。short类型大小是2字节，占位符是%hd。\n\n- 整形：关键字int类型，用于对一般整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-2147483648~2147483647，当是无符号数的时候数据宽度是0~4294967296。int类型大小是4字节，占位符是%d。\n\n- 浮点形：关键字float类型，用于对浮点数进行定义，数据宽度是1.2E-38~3.4E+38。float类型大小是4字节，占位符是%f，精度范围是6位有效位。\n\n- 浮点形：关键字double类型，用于对浮点数进行定义，数据宽度是2.3E-308~3.4E+308。double类型大小是8字节，占位符是%f，精度范围是15位有效位。\n\n- void类型\n\nvoid，也就是无类型，\"无效的或完全空白的\"\n\n最熟悉的用途是：\n\n·虚函数返回类型\n\n·虚函数作为功能参数\n\n·空指针声明\n\n空指针(void*)：void指针可以指向任意类型的数据，就是说可以用任意类型的指针对void指针对void指针赋值\n\n当函数不需要返回值时，必须使用void限定，这就是我们所说的第一种情况。\n\n例如：void func(int a,char *b)。\n\n当函数不允许接受参数时，必须使用void限定，这就是我们所说的第二种情况。\n\n例如：int func(void)。\n\n<img src=\"8.8~8.15笔记/image-20230812202043325.png\" alt=\"image-20230812202043325\" style=\"zoom: 50%;\" />\n\n### 2.函数\n\n函数是一组一起执行一个任务的语句。每个C程序都至少有一个函数，即主函数main()，所有简单的\n\n程序都可以定义其他额外的函数。\n\n您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，花灯通常是根据每个函数执行一个特定的任务来进行的。\n\n函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。\n\n函数形式\n\nreturn_type function_name(parameter list)\n{\nbody of the function\n}\n\n在C语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：\n\n- 返回类型：一个函数可以i返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type是关键字void。\n- 函数名称：这是函数的实际名称。函数名和参数古列表一起构成了函数签名。\n- 参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数\n- 函数主体：函数主体包括一组定义函数执行任务的语句。\n\n函数例子\n\n```c\n#include <studio.h>\nint add(int a ,int b)/*左边代码add()表示一个加法的函数*/\n{\n    int c = a + b;/*这个函数在被调用时传递了两个参数，第一个是a,第二个是b*/\n    return c;\n}/*函数功能是借用函数里面定义的一个变量c来对a和b相加，再将这个变量c传递出去(return)*/\nint main()\n{\n    int a = 10;\n    int b = 5;\n    int c = add(a,b);\n    printf(\"%d\",c);\n}\n```\n\n我们可以通过将函数封装起来形成⼀个头文件，只需在使用时从头文件中调用函数，就可以使得main函数里面只需要⼀个函数便实现题目所需要的各种功能。\n\n### **3.数组**\n\n- 数组定义(array)\n\n数组是一个固定长度的储存相同数据类型的数据结构，数组中的元素被储存在一段连续的内存空间中。它是最简单的数据结构之一，大多数现代编程语言都内置数组支持。\n\n<img src=\"8.8~8.15笔记/image-20230815170254386.png\" alt=\"image-20230815170254386\" style=\"zoom: 50%;\" />\n\n数组特点\n\n1.数组必须有相应的数据类型，而且数组里面元素的类型必须和数组本身的类型相对应。\n\n2.数组元素的个数和数组本身的大小有关系。\n\n3.数组通过下标遍历（循环）、寻找元素\n\n4.数组可以被函数调用（数组本身是一个变量）\n\n- 数组应用\n\n数组可以把许多相同的元素整合到一起保存使用，比如对输入能够直接使用数组输入，而不必像之前一样将scanf放在for循环里面。\n\n- 字符数组（字符串）\n\n字符数组实际上是一系列字符的集合，也就是字符串(String)\n\n在C语言中，没有专门的字符串变量，没有string类型，通常就用一个字符数组来存放一个字符串。在C语言中，字符串总是以 `\\0`作为结尾，所以`\\0`也被称为字符串结束标志，或者字符串结束符由`\"\"`包围的字符串会自动在末尾添加`\\0`。\n\n例如：`\"abc\"`看起来只包含了3个字符，但C语言会在最后添加一个`\\0`，但我们感受不到。而由`''`赋值的字符串则不会在末尾自动加\\0，若要以`%s`输出，则会输出错误，应该在末尾手动添加`\"\\0\"`。\n\n- 多维数组\n\nC语言的多维数组就相当于是元素为数组的数组（套娃）\n\n数组例题：用数组逆序输出一组个数为0~10的数\n\n```c\n#include <stdio.h>\nint main()\n{\n\tint number=0;\n\tscanf_s(\"%d\",&number);\n\tint array[10];\n\tfor(int i=0;i<number;i++)\n\t{\n\t\tscanf_s(\"%d\",&array[i]);\n\t}\n\tfor(int i=0;i<number/2;i++)\n\t{\n\t\t int temp=array[i];\n\t\tarray[i]=array[number-i -1];\n\t\tarray[number-i -1]=temp;\n\t}\n\tfor(int i=0;i<number;i++)\n\t{\n\t\tprintf(\"%d \",array[i]);\n\t}\n}\n```\n\n\n\n","slug":"8.8~8.15笔记","published":1,"updated":"2023-08-19T09:45:04.908Z","_id":"cllgqs1ju0000rkv5eemu6aft","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"8-8-8-15笔记\"><a href=\"#8-8-8-15笔记\" class=\"headerlink\" title=\"8.8~8.15笔记\"></a>8.8~8.15笔记</h1><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a><strong>1. 数据类型</strong></h3><ul>\n<li><strong>字节</strong></li>\n</ul>\n<p>计算机专用的一种计量单位，一个字节代表了8个二进制位也就是256（0000 0000）2的8次方<br>两个字节（BYTE）构成一个字（WORD），两个字（WORD）构成一个双字（DOUBLE WORD）</p>\n<p>双字可简写为DWORD，相当于四个字节</p>\n<blockquote>\n<p>Q：为什么会有数据类型？</p>\n<p>A：在C语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量储存占用的空间，以及如何结束储存的位模式。</p>\n</blockquote>\n<h4 id=\"C语言的数据类型共分为：\"><a href=\"#C语言的数据类型共分为：\" class=\"headerlink\" title=\"C语言的数据类型共分为：\"></a>C语言的数据类型共分为：</h4><p>1.基本类型：包括整形（int），浮点型（float），字符型（char），和双精度浮点型（double）</p>\n<p>2.枚举类型被用来定义在程序中只能赋予其一定的离散整数值的变量</p>\n<p>3.void类型：表示没有值的数据类型，通常用于函数返回值</p>\n<p>4.派生类型：包括数组类型，指针类型和结构体类型</p>\n<ul>\n<li><strong>有符号和无符号关键字</strong></li>\n</ul>\n<p>Signed：类型默认位signed，也就是有符号数</p>\n<p>Unisigned：可以搭配基本类型进行定义，无符号数关键字</p>\n<p>有符号数和无符号数区分：</p>\n<p>有符号数就是负数，正数就是正数；无符号数负数也代表了一个正数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d %u &quot;</span>,a,a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d %u &quot;</span>,b,b);</span><br><span class=\"line\">    <span class=\"comment\">//%u就是unsigned int的占位符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果却是<code>3 3  -1 4294967295 </code> 4294967295可以看作范围的终点，而范围又可以看作是一个圆圈，过了这个终点又会变为起点，所以4294967295+1输出是0，这就是数据的溢出。</p>\n<ul>\n<li><strong>sizeof()操作符</strong>：用来查看参数的大小，操作数可以是变量，也可以是数据类型</li>\n</ul>\n<p>1.用于数据类型</p>\n<p>sizeof使用形式：sizeof(type)\t数据类型必须用括号括住：sizeof(int)</p>\n<p>2.用于变量</p>\n<p>sizeof使用形式：sizeo(var_name)或sizeof\tvar_name</p>\n<p>变量名可以不用括号括住 如：sizeof(var_name), sizeof\tvar_name等都是正确形式</p>\n<p>注意：sizeof操作符不能用于函数类型，不完全类型或位字段。</p>\n<p>sizeof操作符的结果类型是<strong>size_t</strong></p>\n<h4 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h4><p>字符型：关键字char类型，用于对小型整数或者字符变量进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度是-128<del>127，当是无符号数的时候数据宽度是0</del>256.char类型大小是1字节，占位符是%c。</p>\n<blockquote>\n<p>1字节&#x3D;&#x3D;8比特(bit)&#x3D;&#x3D;256</p>\n</blockquote>\n<p>计算机表示字符的方式：</p>\n<p>ascall码：计算机方便对英文字符进行编码的操作码，一个ascall码有八位(1字节)</p>\n<p>unicode：计算机对各国字符统一进行的编码，一个unicode码有十六位(2字节)</p>\n<ul>\n<li><p>短整形：关键字short类型，用于对较小整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-32768<del>32767，当时无符号数的时候数据宽度是0</del>65535。short类型大小是2字节，占位符是%hd。</p>\n</li>\n<li><p>整形：关键字int类型，用于对一般整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-2147483648<del>2147483647，当是无符号数的时候数据宽度是0</del>4294967296。int类型大小是4字节，占位符是%d。</p>\n</li>\n<li><p>浮点形：关键字float类型，用于对浮点数进行定义，数据宽度是1.2E-38~3.4E+38。float类型大小是4字节，占位符是%f，精度范围是6位有效位。</p>\n</li>\n<li><p>浮点形：关键字double类型，用于对浮点数进行定义，数据宽度是2.3E-308~3.4E+308。double类型大小是8字节，占位符是%f，精度范围是15位有效位。</p>\n</li>\n<li><p>void类型</p>\n</li>\n</ul>\n<p>void，也就是无类型，”无效的或完全空白的”</p>\n<p>最熟悉的用途是：</p>\n<p>·虚函数返回类型</p>\n<p>·虚函数作为功能参数</p>\n<p>·空指针声明</p>\n<p>空指针(void*)：void指针可以指向任意类型的数据，就是说可以用任意类型的指针对void指针对void指针赋值</p>\n<p>当函数不需要返回值时，必须使用void限定，这就是我们所说的第一种情况。</p>\n<p>例如：void func(int a,char *b)。</p>\n<p>当函数不允许接受参数时，必须使用void限定，这就是我们所说的第二种情况。</p>\n<p>例如：int func(void)。</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/15/8.8~8.15%E7%AC%94%E8%AE%B0/image-20230812202043325.png\" alt=\"image-20230812202043325\" data-caption=\"image-20230812202043325\" loading=\"lazy\">\n\n<h3 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2.函数\"></a>2.函数</h3><p>函数是一组一起执行一个任务的语句。每个C程序都至少有一个函数，即主函数main()，所有简单的</p>\n<p>程序都可以定义其他额外的函数。</p>\n<p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，花灯通常是根据每个函数执行一个特定的任务来进行的。</p>\n<p>函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。</p>\n<p>函数形式</p>\n<p>return_type function_name(parameter list)<br>{<br>body of the function<br>}</p>\n<p>在C语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<ul>\n<li>返回类型：一个函数可以i返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type是关键字void。</li>\n<li>函数名称：这是函数的实际名称。函数名和参数古列表一起构成了函数签名。</li>\n<li>参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数</li>\n<li>函数主体：函数主体包括一组定义函数执行任务的语句。</li>\n</ul>\n<p>函数例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;studio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a ,<span class=\"type\">int</span> b)</span><span class=\"comment\">/*左边代码add()表示一个加法的函数*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = a + b;<span class=\"comment\">/*这个函数在被调用时传递了两个参数，第一个是a,第二个是b*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;<span class=\"comment\">/*函数功能是借用函数里面定义的一个变量c来对a和b相加，再将这个变量c传递出去(return)*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = add(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过将函数封装起来形成⼀个头文件，只需在使用时从头文件中调用函数，就可以使得main函数里面只需要⼀个函数便实现题目所需要的各种功能。</p>\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3.数组\"></a><strong>3.数组</strong></h3><ul>\n<li>数组定义(array)</li>\n</ul>\n<p>数组是一个固定长度的储存相同数据类型的数据结构，数组中的元素被储存在一段连续的内存空间中。它是最简单的数据结构之一，大多数现代编程语言都内置数组支持。</p>\n<img onerror=\"imgOnError(this);\" data-fancybox=\"gallery\" src=\"/2023/08/15/8.8~8.15%E7%AC%94%E8%AE%B0/image-20230815170254386.png\" alt=\"image-20230815170254386\" data-caption=\"image-20230815170254386\" loading=\"lazy\">\n\n<p>数组特点</p>\n<p>1.数组必须有相应的数据类型，而且数组里面元素的类型必须和数组本身的类型相对应。</p>\n<p>2.数组元素的个数和数组本身的大小有关系。</p>\n<p>3.数组通过下标遍历（循环）、寻找元素</p>\n<p>4.数组可以被函数调用（数组本身是一个变量）</p>\n<ul>\n<li>数组应用</li>\n</ul>\n<p>数组可以把许多相同的元素整合到一起保存使用，比如对输入能够直接使用数组输入，而不必像之前一样将scanf放在for循环里面。</p>\n<ul>\n<li>字符数组（字符串）</li>\n</ul>\n<p>字符数组实际上是一系列字符的集合，也就是字符串(String)</p>\n<p>在C语言中，没有专门的字符串变量，没有string类型，通常就用一个字符数组来存放一个字符串。在C语言中，字符串总是以 <code>\\0</code>作为结尾，所以<code>\\0</code>也被称为字符串结束标志，或者字符串结束符由<code>&quot;&quot;</code>包围的字符串会自动在末尾添加<code>\\0</code>。</p>\n<p>例如：<code>&quot;abc&quot;</code>看起来只包含了3个字符，但C语言会在最后添加一个<code>\\0</code>，但我们感受不到。而由<code>&#39;&#39;</code>赋值的字符串则不会在末尾自动加\\0，若要以<code>%s</code>输出，则会输出错误，应该在末尾手动添加<code>&quot;\\0&quot;</code>。</p>\n<ul>\n<li>多维数组</li>\n</ul>\n<p>C语言的多维数组就相当于是元素为数组的数组（套娃）</p>\n<p>数组例题：用数组逆序输出一组个数为0~10的数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> number=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>,&amp;number);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number/<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t <span class=\"type\">int</span> temp=<span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[i]=<span class=\"built_in\">array</span>[number-i <span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[number-i <span class=\"number\">-1</span>]=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"8-8-8-15笔记\"><a href=\"#8-8-8-15笔记\" class=\"headerlink\" title=\"8.8~8.15笔记\"></a>8.8~8.15笔记</h1><h3 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a><strong>1. 数据类型</strong></h3><ul>\n<li><strong>字节</strong></li>\n</ul>\n<p>计算机专用的一种计量单位，一个字节代表了8个二进制位也就是256（0000 0000）2的8次方<br>两个字节（BYTE）构成一个字（WORD），两个字（WORD）构成一个双字（DOUBLE WORD）</p>\n<p>双字可简写为DWORD，相当于四个字节</p>\n<blockquote>\n<p>Q：为什么会有数据类型？</p>\n<p>A：在C语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量储存占用的空间，以及如何结束储存的位模式。</p>\n</blockquote>\n<h4 id=\"C语言的数据类型共分为：\"><a href=\"#C语言的数据类型共分为：\" class=\"headerlink\" title=\"C语言的数据类型共分为：\"></a>C语言的数据类型共分为：</h4><p>1.基本类型：包括整形（int），浮点型（float），字符型（char），和双精度浮点型（double）</p>\n<p>2.枚举类型被用来定义在程序中只能赋予其一定的离散整数值的变量</p>\n<p>3.void类型：表示没有值的数据类型，通常用于函数返回值</p>\n<p>4.派生类型：包括数组类型，指针类型和结构体类型</p>\n<ul>\n<li><strong>有符号和无符号关键字</strong></li>\n</ul>\n<p>Signed：类型默认位signed，也就是有符号数</p>\n<p>Unisigned：可以搭配基本类型进行定义，无符号数关键字</p>\n<p>有符号数和无符号数区分：</p>\n<p>有符号数就是负数，正数就是正数；无符号数负数也代表了一个正数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d %u &quot;</span>,a,a);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %d %u &quot;</span>,b,b);</span><br><span class=\"line\">    <span class=\"comment\">//%u就是unsigned int的占位符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果却是<code>3 3  -1 4294967295 </code> 4294967295可以看作范围的终点，而范围又可以看作是一个圆圈，过了这个终点又会变为起点，所以4294967295+1输出是0，这就是数据的溢出。</p>\n<ul>\n<li><strong>sizeof()操作符</strong>：用来查看参数的大小，操作数可以是变量，也可以是数据类型</li>\n</ul>\n<p>1.用于数据类型</p>\n<p>sizeof使用形式：sizeof(type)\t数据类型必须用括号括住：sizeof(int)</p>\n<p>2.用于变量</p>\n<p>sizeof使用形式：sizeo(var_name)或sizeof\tvar_name</p>\n<p>变量名可以不用括号括住 如：sizeof(var_name), sizeof\tvar_name等都是正确形式</p>\n<p>注意：sizeof操作符不能用于函数类型，不完全类型或位字段。</p>\n<p>sizeof操作符的结果类型是<strong>size_t</strong></p>\n<h4 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h4><p>字符型：关键字char类型，用于对小型整数或者字符变量进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度是-128<del>127，当是无符号数的时候数据宽度是0</del>256.char类型大小是1字节，占位符是%c。</p>\n<blockquote>\n<p>1字节&#x3D;&#x3D;8比特(bit)&#x3D;&#x3D;256</p>\n</blockquote>\n<p>计算机表示字符的方式：</p>\n<p>ascall码：计算机方便对英文字符进行编码的操作码，一个ascall码有八位(1字节)</p>\n<p>unicode：计算机对各国字符统一进行的编码，一个unicode码有十六位(2字节)</p>\n<ul>\n<li><p>短整形：关键字short类型，用于对较小整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-32768<del>32767，当时无符号数的时候数据宽度是0</del>65535。short类型大小是2字节，占位符是%hd。</p>\n</li>\n<li><p>整形：关键字int类型，用于对一般整数进行定义，可以搭配unsigned做无符号数使用，当是有符号数时数据宽度时-2147483648<del>2147483647，当是无符号数的时候数据宽度是0</del>4294967296。int类型大小是4字节，占位符是%d。</p>\n</li>\n<li><p>浮点形：关键字float类型，用于对浮点数进行定义，数据宽度是1.2E-38~3.4E+38。float类型大小是4字节，占位符是%f，精度范围是6位有效位。</p>\n</li>\n<li><p>浮点形：关键字double类型，用于对浮点数进行定义，数据宽度是2.3E-308~3.4E+308。double类型大小是8字节，占位符是%f，精度范围是15位有效位。</p>\n</li>\n<li><p>void类型</p>\n</li>\n</ul>\n<p>void，也就是无类型，”无效的或完全空白的”</p>\n<p>最熟悉的用途是：</p>\n<p>·虚函数返回类型</p>\n<p>·虚函数作为功能参数</p>\n<p>·空指针声明</p>\n<p>空指针(void*)：void指针可以指向任意类型的数据，就是说可以用任意类型的指针对void指针对void指针赋值</p>\n<p>当函数不需要返回值时，必须使用void限定，这就是我们所说的第一种情况。</p>\n<p>例如：void func(int a,char *b)。</p>\n<p>当函数不允许接受参数时，必须使用void限定，这就是我们所说的第二种情况。</p>\n<p>例如：int func(void)。</p>\n<img src=\"/2023/08/15/8.8~8.15%E7%AC%94%E8%AE%B0/image-20230812202043325.png\" alt=\"image-20230812202043325\" style=\"zoom: 50%;\">\n\n<h3 id=\"2-函数\"><a href=\"#2-函数\" class=\"headerlink\" title=\"2.函数\"></a>2.函数</h3><p>函数是一组一起执行一个任务的语句。每个C程序都至少有一个函数，即主函数main()，所有简单的</p>\n<p>程序都可以定义其他额外的函数。</p>\n<p>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，花灯通常是根据每个函数执行一个特定的任务来进行的。</p>\n<p>函数声明告诉编译器函数的名称、返回类型和参数。函数定义提供了函数的实际主体。</p>\n<p>函数形式</p>\n<p>return_type function_name(parameter list)<br>{<br>body of the function<br>}</p>\n<p>在C语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p>\n<ul>\n<li>返回类型：一个函数可以i返回一个值。return_type是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type是关键字void。</li>\n<li>函数名称：这是函数的实际名称。函数名和参数古列表一起构成了函数签名。</li>\n<li>参数：参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数</li>\n<li>函数主体：函数主体包括一组定义函数执行任务的语句。</li>\n</ul>\n<p>函数例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;studio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> a ,<span class=\"type\">int</span> b)</span><span class=\"comment\">/*左边代码add()表示一个加法的函数*/</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = a + b;<span class=\"comment\">/*这个函数在被调用时传递了两个参数，第一个是a,第二个是b*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;<span class=\"comment\">/*函数功能是借用函数里面定义的一个变量c来对a和b相加，再将这个变量c传递出去(return)*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> c = add(a,b);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以通过将函数封装起来形成⼀个头文件，只需在使用时从头文件中调用函数，就可以使得main函数里面只需要⼀个函数便实现题目所需要的各种功能。</p>\n<h3 id=\"3-数组\"><a href=\"#3-数组\" class=\"headerlink\" title=\"3.数组\"></a><strong>3.数组</strong></h3><ul>\n<li>数组定义(array)</li>\n</ul>\n<p>数组是一个固定长度的储存相同数据类型的数据结构，数组中的元素被储存在一段连续的内存空间中。它是最简单的数据结构之一，大多数现代编程语言都内置数组支持。</p>\n<img src=\"/2023/08/15/8.8~8.15%E7%AC%94%E8%AE%B0/image-20230815170254386.png\" alt=\"image-20230815170254386\" style=\"zoom: 50%;\">\n\n<p>数组特点</p>\n<p>1.数组必须有相应的数据类型，而且数组里面元素的类型必须和数组本身的类型相对应。</p>\n<p>2.数组元素的个数和数组本身的大小有关系。</p>\n<p>3.数组通过下标遍历（循环）、寻找元素</p>\n<p>4.数组可以被函数调用（数组本身是一个变量）</p>\n<ul>\n<li>数组应用</li>\n</ul>\n<p>数组可以把许多相同的元素整合到一起保存使用，比如对输入能够直接使用数组输入，而不必像之前一样将scanf放在for循环里面。</p>\n<ul>\n<li>字符数组（字符串）</li>\n</ul>\n<p>字符数组实际上是一系列字符的集合，也就是字符串(String)</p>\n<p>在C语言中，没有专门的字符串变量，没有string类型，通常就用一个字符数组来存放一个字符串。在C语言中，字符串总是以 <code>\\0</code>作为结尾，所以<code>\\0</code>也被称为字符串结束标志，或者字符串结束符由<code>&quot;&quot;</code>包围的字符串会自动在末尾添加<code>\\0</code>。</p>\n<p>例如：<code>&quot;abc&quot;</code>看起来只包含了3个字符，但C语言会在最后添加一个<code>\\0</code>，但我们感受不到。而由<code>&#39;&#39;</code>赋值的字符串则不会在末尾自动加\\0，若要以<code>%s</code>输出，则会输出错误，应该在末尾手动添加<code>&quot;\\0&quot;</code>。</p>\n<ul>\n<li>多维数组</li>\n</ul>\n<p>C语言的多维数组就相当于是元素为数组的数组（套娃）</p>\n<p>数组例题：用数组逆序输出一组个数为0~10的数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> number=<span class=\"number\">0</span>;</span><br><span class=\"line\">\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>,&amp;number);</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tscanf_s(<span class=\"string\">&quot;%d&quot;</span>,&amp;<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number/<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t <span class=\"type\">int</span> temp=<span class=\"built_in\">array</span>[i];</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[i]=<span class=\"built_in\">array</span>[number-i <span class=\"number\">-1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">array</span>[number-i <span class=\"number\">-1</span>]=temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;number;i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,<span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"}],"PostAsset":[{"_id":"source/_posts/8.1~8.7周报/image-20230805154931621.png","slug":"image-20230805154931621.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805155452616.png","slug":"image-20230805155452616.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805170423462.png","slug":"image-20230805170423462.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805171655526.png","slug":"image-20230805171655526.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805172454571.png","slug":"image-20230805172454571.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805172114403.png","slug":"image-20230805172114403.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.1~8.7周报/image-20230805165608821.png","slug":"image-20230805165608821.png","post":"clkuqjq1w0003zgv5anun4kvf","modified":0,"renderable":0},{"_id":"source/_posts/8.8~8.15笔记/image-20230812202043325.png","slug":"image-20230812202043325.png","post":"cllgqs1ju0000rkv5eemu6aft","modified":0,"renderable":0},{"_id":"source/_posts/8.8~8.15笔记/image-20230815170254386.png","slug":"image-20230815170254386.png","post":"cllgqs1ju0000rkv5eemu6aft","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"clkuqjq1z0006zgv50jj5931b","tag_id":"clkuqjq200007zgv5eqb6h64e","_id":"clkuqjq200008zgv5hpp55f2s"},{"post_id":"clkuqjq1w0003zgv5anun4kvf","tag_id":"clkuqjq200007zgv5eqb6h64e","_id":"cllgqs1jw0001rkv572rohhe9"},{"post_id":"cllgqs1ju0000rkv5eemu6aft","tag_id":"clkuqjq200007zgv5eqb6h64e","_id":"cllgqs1jw0002rkv5hfsvb1vz"}],"Tag":[{"name":"笔记","_id":"clkuqjq200007zgv5eqb6h64e"}]}}